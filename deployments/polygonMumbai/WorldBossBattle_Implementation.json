{
  "address": "0x713d3913fB1ae60F7d23ab2382e935c7267A53D9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotEnoughTokens",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_nftOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_stakedTokenTime",
          "type": "uint256"
        }
      ],
      "name": "NFTStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_nftReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        }
      ],
      "name": "NFTUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "setterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "SetBattlePeriodUnstakeStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_coolDownPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newCoolDownPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "SetCoolDownPeriod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_maxOldCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_maxNewCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "SetMaxStakeCount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldMinTokensRequired",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newMinTokensRequired",
          "type": "uint256"
        }
      ],
      "name": "SetMinTokensRequired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_oldNFTContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_nftContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "SetNFTContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_oldTokenContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newTokenContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "SetTokenContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_oldWBBActionsAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newWBBActionsAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "SetWBBActionsAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accessControls",
      "outputs": [
        {
          "internalType": "contract IGameAccessControls",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cdhNFT",
      "outputs": [
        {
          "internalType": "contract ICDHNFTInventory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nftCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "name": "checkRequiredTokenBalance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cooldownPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableBattlePeriodUnstake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "getAllToken",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getStakedTokenTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        }
      ],
      "name": "getStakedTokensForBattle",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICDHNFTInventory",
          "name": "_cdhNFTAddress",
          "type": "address"
        },
        {
          "internalType": "contract IToken",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxStakeCount",
          "type": "uint256"
        },
        {
          "internalType": "contract IWBBActions",
          "name": "_wbbActionsAddress",
          "type": "address"
        },
        {
          "internalType": "contract IGameAccessControls",
          "name": "_accessControls",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pastBattleId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "isEligibleToStake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastInteractionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestBattle",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxStakeCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minTokensRequired",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_unstakeStatus",
          "type": "bool"
        }
      ],
      "name": "setBattlePeriodUnstakeStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftContract",
          "type": "address"
        }
      ],
      "name": "setCDHNFTContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_time",
          "type": "uint256"
        }
      ],
      "name": "setCoolDownPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxCount",
          "type": "uint256"
        }
      ],
      "name": "setMaxStakeCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setMinTokensRequired",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wbbActionsAddress",
          "type": "address"
        }
      ],
      "name": "setWBBActionsContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        }
      ],
      "name": "stakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakersAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "contract IToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenToBattleId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        }
      ],
      "name": "unstakeAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        }
      ],
      "name": "unstakeAllInternal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        }
      ],
      "name": "unstakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        }
      ],
      "name": "unstakeTokensInternal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenLength",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_battleId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "validStakeCount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wbbActions",
      "outputs": [
        {
          "internalType": "contract IWBBActions",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x764533329a1822221bb87ecbe10a8072ff26884c711ba9583fdf2014ee0329e1",
  "receipt": {
    "to": null,
    "from": "0xfD286ed92Ae5e35C197dD59b39a232038B6D63d4",
    "contractAddress": "0x713d3913fB1ae60F7d23ab2382e935c7267A53D9",
    "transactionIndex": 7,
    "gasUsed": "4861070",
    "logsBloom": "0x
    "blockHash": "0x32c33d9d78a6cf16dd0e4489fa061f413d972e4d5eddac052979736383336800",
    "transactionHash": "0x764533329a1822221bb87ecbe10a8072ff26884c711ba9583fdf2014ee0329e1",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 36185384,
        "transactionHash": "0x764533329a1822221bb87ecbe10a8072ff26884c711ba9583fdf2014ee0329e1",
        "address": "0x713d3913fB1ae60F7d23ab2382e935c7267A53D9",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 38,
        "blockHash": "0x32c33d9d78a6cf16dd0e4489fa061f413d972e4d5eddac052979736383336800"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 36185384,
        "transactionHash": "0x764533329a1822221bb87ecbe10a8072ff26884c711ba9583fdf2014ee0329e1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fd286ed92ae5e35c197dd59b39a232038b6d63d4",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000019e7ad15de120000000000000000000000000000000000000000000000000017978d5cec8ce2850000000000000000000000000000000000000000000009dc04f0a0e94a857c35000000000000000000000000000000000000000000000000177da5afd6aed0850000000000000000000000000000000000000000000009dc050a889660638e35",
        "logIndex": 39,
        "blockHash": "0x32c33d9d78a6cf16dd0e4489fa061f413d972e4d5eddac052979736383336800"
      }
    ],
    "blockNumber": 36185384,
    "cumulativeGasUsed": "5997115",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b0e6c88d3892fb29fd7f2c1cc631b020",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotEnoughTokens\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_nftOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakedTokenTime\",\"type\":\"uint256\"}],\"name\":\"NFTStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_nftReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"}],\"name\":\"NFTUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"SetBattlePeriodUnstakeStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coolDownPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newCoolDownPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"SetCoolDownPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxOldCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxNewCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"SetMaxStakeCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldMinTokensRequired\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMinTokensRequired\",\"type\":\"uint256\"}],\"name\":\"SetMinTokensRequired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldNFTContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"SetNFTContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldTokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newTokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"SetTokenContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldWBBActionsAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newWBBActionsAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"SetWBBActionsAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accessControls\",\"outputs\":[{\"internalType\":\"contract IGameAccessControls\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cdhNFT\",\"outputs\":[{\"internalType\":\"contract ICDHNFTInventory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"checkRequiredTokenBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBattlePeriodUnstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getAllToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getStakedTokenTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"}],\"name\":\"getStakedTokensForBattle\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICDHNFTInventory\",\"name\":\"_cdhNFTAddress\",\"type\":\"address\"},{\"internalType\":\"contract IToken\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxStakeCount\",\"type\":\"uint256\"},{\"internalType\":\"contract IWBBActions\",\"name\":\"_wbbActionsAddress\",\"type\":\"address\"},{\"internalType\":\"contract IGameAccessControls\",\"name\":\"_accessControls\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pastBattleId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"isEligibleToStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastInteractionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestBattle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokensRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_unstakeStatus\",\"type\":\"bool\"}],\"name\":\"setBattlePeriodUnstakeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"name\":\"setCDHNFTContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setCoolDownPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxCount\",\"type\":\"uint256\"}],\"name\":\"setMaxStakeCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinTokensRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wbbActionsAddress\",\"type\":\"address\"}],\"name\":\"setWBBActionsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToBattleId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"}],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"}],\"name\":\"unstakeAllInternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"}],\"name\":\"unstakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"}],\"name\":\"unstakeTokensInternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenLength\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_battleId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"validStakeCount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbbActions\",\"outputs\":[{\"internalType\":\"contract IWBBActions\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"BattleOps are being inherited in this contract\",\"kind\":\"dev\",\"methods\":{\"checkRequiredTokenBalance(uint256,uint256)\":{\"params\":{\"_balance\":\"user ERC20 token balance\",\"_nftCount\":\"how many nft user have\"},\"returns\":{\"_0\":\"true if he has higher ERC20 token balance than required\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getAllToken(address)\":{\"params\":{\"_player\":\"Address of the player to get all tokens\"}},\"getStakedTokenTime(address,uint256)\":{\"params\":{\"_player\":\"Address of player getting staked time for token\",\"_tokenId\":\"Staked TokenID\"}},\"getStakedTokensForBattle(address,string)\":{\"params\":{\"_player\":\"is the user address\"}},\"initialize(address,address,uint256,address,address)\":{\"params\":{\"_accessControls\":\"Contract address for access controls\",\"_cdhNFTAddress\":\"Contract address for NFT Inventory,\",\"_maxStakeCount\":\"Number of tokens\",\"_tokenAddress\":\"Contract address for ERC20 token\",\"_wbbActionsAddress\":\"Contract address for WorldBossBattle Actions\"}},\"isEligibleToStake(string,address)\":{\"params\":{\"_pastBattleId\":\"Previous battleID\",\"_player\":\"Address of player checking eligibility of\"},\"returns\":{\"_0\":\"boolean if statement is true\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"setBattlePeriodUnstakeStatus(bool)\":{\"params\":{\"_unstakeStatus\":\"boolean\"}},\"setCDHNFTContractAddress(address)\":{\"details\":\"only authorized addresses could change NFT contract address\",\"params\":{\"_nftContract\":\"new NFT address\"}},\"setCoolDownPeriod(uint256)\":{\"params\":{\"_time\":\"in unix\"},\"returns\":{\"_0\":\"_time\"}},\"setMinTokensRequired(uint256)\":{\"params\":{\"_value\":\"a uint value for setting minimum tokens required.\"}},\"setToken(address)\":{\"details\":\"only authorized addresses could change token contract address\",\"params\":{\"_tokenAddress\":\"is the new token address\"}},\"setWBBActionsContract(address)\":{\"details\":\"only authorized addresses could change WBB Actions contract address\",\"params\":{\"_wbbActionsAddress\":\"new wbbActionsContract address\"}},\"stake(uint256,string)\":{\"details\":\"it calls internalStake function for further processing\",\"params\":{\"_battleId\":\"is unique battle in which the NFT will be staked\",\"_tokenId\":\"TokenID of CDH NFT\"}},\"stakeTokens(uint256[],string)\":{\"details\":\"it calls internalStake function for further processing\",\"params\":{\"_battleId\":\"is unique battle in which the NFT will be staked\",\"tokenIds\":\"is an array of tokenId of CDH NFT\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unstake(uint256,string)\":{\"details\":\"Calls internalUnStake function for unstaking tokens\",\"params\":{\"_battleId\":\"is unique battle from which the NFT will be unstaked\",\"_tokenId\":\"TokenId of CDH NFT\"}},\"unstakeAll(string)\":{\"details\":\"it calls internalUnStakeAll function for further processing\",\"params\":{\"_battleId\":\"is unique battle in which the NFT will be unstaked\"}},\"unstakeAllInternal(address,string)\":{\"details\":\"it calls internalUnStakeAll function for further processing\",\"params\":{\"_battleId\":\"unique battle in which the NFT will be unstaked\",\"_player\":\"the address of a user which nft will be unstaked\"}},\"unstakeTokens(uint256[],string)\":{\"details\":\"it calls internalUnStake function for further processing\",\"params\":{\"_battleId\":\"is unique battle in which the NFT will be unstaked\",\"tokenIds\":\"is tokenId of CDHNFT\"}},\"unstakeTokensInternal(address,uint256[],string)\":{\"details\":\"it calls internalUnStakeAll function for further processing\",\"params\":{\"_battleId\":\"unique battle in which the NFT will be unstaked\",\"_player\":\"the address of a user which nft will be unstaked\",\"_tokenIds\":\"tokenid that user staked\"}},\"validStakeCount(uint256,string,address)\":{\"params\":{\"tokenLength\":\"number of tokenIDs that about to staked\"}}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"enableBattlePeriodUnstake\":{\"details\":\"true - unstake after cool down period end, false - unstake after battle ends\"}},\"title\":\"WorldBossBattle, the game will support NFTs for in-game items and stakes the NFTs to join the P2E event.\",\"version\":1},\"userdoc\":{\"events\":{\"NFTStaked(address,uint256,string,uint256)\":{\"notice\":\"Event is emitted when NFT is staked with owner address, token id and in which battle the token is staked\"},\"NFTUnstaked(address,uint256,string)\":{\"notice\":\"Event is emitted when NFT is un-staked with owner address, token id and in which battle the token is un-staked\"},\"SetBattlePeriodUnstakeStatus(address,bool)\":{\"notice\":\"Event is emitted when battle period unstake status is set\"},\"SetCoolDownPeriod(uint256,uint256,address)\":{\"notice\":\"Event for setting cooldown period for user to be able to restake / unstake token\"},\"SetMaxStakeCount(uint256,uint256,address)\":{\"notice\":\"Event for when setting maximum number of token a user can stake which emits old count and new count address along with sender address\"},\"SetMinTokensRequired(address,uint256,uint256)\":{\"notice\":\"Event is emitted when minimum tokens required to stake is set\"},\"SetNFTContract(address,address,address)\":{\"notice\":\"Event for when setting NFT contract which emits old NFT address and new NFT address along with sender address\"},\"SetTokenContract(address,address,address)\":{\"notice\":\"Event for when setting ERC20 Token contract which emits old token address and new token address along with sender address\"},\"SetWBBActionsAddress(address,address,address)\":{\"notice\":\"Event for setting WBBActions contract Address which emits old WBBActions address and new WBBActions address along with sender address\"}},\"kind\":\"user\",\"methods\":{\"cdhNFT()\":{\"notice\":\"to store cdhNFT contract address\"},\"checkRequiredTokenBalance(uint256,uint256)\":{\"notice\":\"Internal methods for staking operations\"},\"cooldownPeriod()\":{\"notice\":\"to store the cooldownPeriod\"},\"enableBattlePeriodUnstake()\":{\"notice\":\"Flag to enable or disable the battle unstake period.\"},\"getAllToken(address)\":{\"notice\":\"function to get all the token that a address has in the Inventory contract\"},\"getStakedTokenTime(address,uint256)\":{\"notice\":\"function to see user stakedTokenTime for specific tokenId\"},\"getStakedTokensForBattle(address,string)\":{\"notice\":\"Get all the tokens staked by user in the battleId\"},\"initialize(address,address,uint256,address,address)\":{\"notice\":\"Since it is upgradable function it is initialized instead of using constructor\"},\"latestBattle()\":{\"notice\":\"function to get the latest battle that is created\"},\"maxStakeCount()\":{\"notice\":\"to store the value in which a user can stake\"},\"minTokensRequired()\":{\"notice\":\"minimum Tokens for staking\"},\"pause()\":{\"notice\":\"Pause contract so users wont be able to stake new tokens\"},\"setBattlePeriodUnstakeStatus(bool)\":{\"notice\":\"Set the boolean status to enable Battle period stake\"},\"setCDHNFTContractAddress(address)\":{\"notice\":\"function to change the contract address of CDH NFT\"},\"setCoolDownPeriod(uint256)\":{\"notice\":\"to set the cooldown period\"},\"setMaxStakeCount(uint256)\":{\"notice\":\"function to set the limit of token that can be staked\"},\"setMinTokensRequired(uint256)\":{\"notice\":\"Set the minimum number of tokens required for staking nft in WBB\"},\"setToken(address)\":{\"notice\":\"function to change the contract address of ERC20 token\"},\"setWBBActionsContract(address)\":{\"notice\":\"Change the WBBActionsContract address that will set WBBActionsContract\"},\"stake(uint256,string)\":{\"notice\":\"Function to stake a single CDHNFT that sender owns\"},\"stakeTokens(uint256[],string)\":{\"notice\":\"Function to stake a array of CDH NFT that sender owns\"},\"stakers(address)\":{\"notice\":\"Mapping for TokenStakers\"},\"stakersAddress(uint256)\":{\"notice\":\"List of stakers address\"},\"tokenAddress()\":{\"notice\":\"to store ERC20 token contract\"},\"tokenOwner(uint256)\":{\"notice\":\"Mapping of tokenId to owner's address\"},\"tokenToBattleId(uint256)\":{\"notice\":\"maps tokenId to battleId\"},\"unpause()\":{\"notice\":\"UnPause contract so users be able to stake new tokens again\"},\"unstake(uint256,string)\":{\"notice\":\"public function to unstake a single CDHNFT that sender owns\"},\"unstakeAll(string)\":{\"notice\":\"public function to unstake all CDHNFT that sender owns\"},\"unstakeAllInternal(address,string)\":{\"notice\":\"Internal function to unstake all CDHNFT that sender owns\"},\"unstakeTokens(uint256[],string)\":{\"notice\":\"public function to unstake an array of  CDHNFT that sender owns\"},\"unstakeTokensInternal(address,uint256[],string)\":{\"notice\":\"Internal function to unstake tokens CDHNFT that sender owns\"},\"validStakeCount(uint256,string,address)\":{\"notice\":\"Check the limit of token that can be staked\"}},\"notice\":\"you can use this contract for only staking, un-staking and re-staking the NFTs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/game/WorldBossBattle.sol\":\"WorldBossBattle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/game/WBBActions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./WBBData.sol\\\";\\nimport \\\"./interfaces/IGameAccessControls.sol\\\";\\n\\ncontract WBBActions is Initializable, ContextUpgradeable, WBBData {\\n    IGameAccessControls public accessControls;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(IGameAccessControls _accessControls) public initializer {\\n        accessControls = IGameAccessControls(_accessControls);\\n    }\\n\\n    /*\\n        ---------------------------------------\\n        \\u2554\\u2557 \\u250c\\u2500\\u2510\\u250c\\u252c\\u2510\\u250c\\u252c\\u2510\\u252c  \\u250c\\u2500\\u2510  \\u2554\\u2550\\u2557\\u250c\\u2500\\u2510\\u250c\\u252c\\u2510\\u252c\\u250c\\u2500\\u2510\\u250c\\u2510\\u250c\\u250c\\u2500\\u2510\\n        \\u2560\\u2569\\u2557\\u251c\\u2500\\u2524 \\u2502  \\u2502 \\u2502  \\u251c\\u2524   \\u2560\\u2550\\u2563\\u2502   \\u2502 \\u2502\\u2502 \\u2502\\u2502\\u2502\\u2502\\u2514\\u2500\\u2510\\n        \\u255a\\u2550\\u255d\\u2534 \\u2534 \\u2534  \\u2534 \\u2534\\u2500\\u2518\\u2514\\u2500\\u2518  \\u2569 \\u2569\\u2514\\u2500\\u2518 \\u2534 \\u2534\\u2514\\u2500\\u2518\\u2518\\u2514\\u2518\\u2514\\u2500\\u2518\\n        ---------------------------------------\\n    */\\n\\n    function checkBattleExists(string memory _battleId) public view returns (bool) {\\n        return battleExists[_battleId];\\n    }\\n\\n    function setBattleStatus(string memory _battleId, bool _status) external {\\n        address operatorAddress = msg.sender;\\n        require(accessControls.hasManagerRole(operatorAddress), \\\"WBB: Unauthorized to set battle status\\\");\\n        require(checkBattleExists(_battleId), \\\"WBB: Battle doesn't exist\\\");\\n        Battle storage battleInstance = battles[_battleId];\\n        battleInstance.status = _status;\\n        emit SetBattleStatus(operatorAddress, _battleId, _status);\\n    }\\n\\n    /**\\n     * @notice function to create battle requires battleId and bossId, starting time and ending time\\n     * @param _battleId which is a string and identify battles,\\n     * @param _bossIds which is an array of string,\\n     * @param _startTime and\\n     * @param _endTime are unix timestamp\\n     */\\n    function createBattle(string memory _battleId, string[] memory _bossIds, uint256 _startTime, uint256 _endTime) external {\\n        address operatorAddress = msg.sender;\\n        require(accessControls.hasManagerRole(operatorAddress), \\\"WBB: Unauthorized to create battle\\\");\\n        require(!checkBattleExists(_battleId), \\\"WBB: Battle already Exists\\\");\\n        require(_endTime > _startTime, \\\"WBB: invalid battle period\\\");\\n\\n        Battle storage battleInstance = battles[_battleId];\\n        battleInstance.battleId = _battleId;\\n        battleInstance.startTime = _startTime;\\n        battleInstance.endTime = _endTime;\\n        battleInstance.status = true;\\n        battleInstance.bossCount = _bossIds.length;\\n        battleList.push(_battleId);\\n        battleExists[_battleId] = true;\\n\\n        battleInstance.index = battleList.length - 1;\\n        for (uint i = 0; i < _bossIds.length; i++) {\\n            require(checkBossStatus(_bossIds[i]), \\\"WBB: boss not created\\\");\\n            battleInstance.bossIds.push(_bossIds[i]);\\n        }\\n        emit CreateBattle(operatorAddress, _battleId, _bossIds, _startTime, _endTime);\\n    }\\n\\n    /**\\n     * @notice function to update battle requires battleId, bossId, starting time and ending time along with battle status.\\n     *         Note: 1. Battle should be inactive to be able to update.\\n     *               2. If battle should be updated with new bosses or updated boss, new battle SHOULD be created\\n     * @param _battleId which is a string and identify battles,\\n     * @param _startTime and\\n     * @param _endTime are unix timestamp\\n     */\\n    function updateBattle(string memory _battleId, uint256 _startTime, uint256 _endTime) external {\\n        address operatorAddress = msg.sender;\\n        require(accessControls.hasManagerRole(operatorAddress), \\\"WBB: Unauthorized to update battle\\\");\\n        require(checkBattleExists(_battleId), \\\"WBB: Battle doesn't exists\\\");\\n        require(!battles[_battleId].status, \\\"WBB: Battle is active\\\");\\n        require(_endTime > _startTime, \\\"WBB: invalid battle period\\\");\\n\\n        Battle storage battleInstance = battles[_battleId];\\n        require(block.timestamp < battleInstance.endTime, \\\"WBB: battle already ended\\\");\\n\\n        battleInstance.startTime = _startTime;\\n        battleInstance.endTime = _endTime;\\n\\n        emit UpdateBattle(operatorAddress, _battleId, _startTime, _endTime);\\n    }\\n\\n    /// @notice function to check the battleStatus i.e true or false\\n    /// @param _battleId its a string\\n    function checkBattleStatus(string calldata _battleId) public view returns (bool) {\\n        require(checkBattleExists(_battleId), \\\"WBB: Battle doesn't exists\\\");\\n        return battles[_battleId].status;\\n    }\\n\\n    /// @notice to check the battle Ended or not i.e true or false\\n    /// @param _battleId its a string\\n    function checkBattleEnded(string calldata _battleId) public view returns (bool) {\\n        return block.timestamp > battles[_battleId].endTime;\\n    }\\n\\n    /// @notice to check the battle Started or not i.e true or false\\n    /// @param _battleId its a string\\n    function checkBattleStarted(string calldata _battleId) public view returns (bool) {\\n        return block.timestamp > battles[_battleId].startTime;\\n    }\\n\\n    /// @notice gives the end time of an battle in unix\\n    /// @param _battleId which is in string format\\n    function getBattlePeriod(string calldata _battleId) public view returns (uint256 startTime, uint256 endTime) {\\n        return (battles[_battleId].startTime, battles[_battleId].endTime);\\n    }\\n\\n    /// @notice return the last created battle\\n    function getLatestBattle() public view returns (string memory battleId) {\\n        return battleList[battleList.length - 1];\\n    }\\n\\n    /// @notice return the list of all bosses\\n    function getAllBattle() public view returns (string[] memory) {\\n        return battleList;\\n    }\\n\\n    /*\\n        ---------------------------------\\n        \\u2554\\u2557 \\u250c\\u2500\\u2510\\u250c\\u2500\\u2510\\u250c\\u2500\\u2510  \\u2554\\u2550\\u2557\\u250c\\u2500\\u2510\\u250c\\u252c\\u2510\\u252c\\u250c\\u2500\\u2510\\u250c\\u2510\\u250c\\u250c\\u2500\\u2510\\n        \\u2560\\u2569\\u2557\\u2502 \\u2502\\u2514\\u2500\\u2510\\u2514\\u2500\\u2510  \\u2560\\u2550\\u2563\\u2502   \\u2502 \\u2502\\u2502 \\u2502\\u2502\\u2502\\u2502\\u2514\\u2500\\u2510\\n        \\u255a\\u2550\\u255d\\u2514\\u2500\\u2518\\u2514\\u2500\\u2518\\u2514\\u2500\\u2518  \\u2569 \\u2569\\u2514\\u2500\\u2518 \\u2534 \\u2534\\u2514\\u2500\\u2518\\u2518\\u2514\\u2518\\u2514\\u2500\\u2518\\n        ---------------------------------\\n    */\\n\\n    function checkBossExists(string memory _bossId) public view returns (bool) {\\n        return bossExists[_bossId];\\n    }\\n\\n    function setBossStatus(string memory _bossId, bool _status) external {\\n        address operatorAddress = msg.sender;\\n        require(accessControls.hasManagerRole(operatorAddress), \\\"WBB: Unauthorized to update boss status\\\");\\n        require(checkBossExists(_bossId), \\\"WBB: Boss doesn't exist\\\");\\n        Boss storage bossInstance = bosses[_bossId];\\n        bossInstance.status = _status;\\n        emit SetBossStatus(operatorAddress, _bossId, _status);\\n    }\\n\\n    /// @notice checks the boss is available or not\\n    /// @param _bossId is should be given as parameter\\n    function checkBossStatus(string memory _bossId) public view returns (bool) {\\n        return bosses[_bossId].status;\\n    }\\n\\n    /**\\n     * @notice Method to create a new boss.\\n     * @param bossId which is a string and identify boss,\\n     * @param name which is name of string,\\n     * @param maxHp is uint that have boss health and\\n     * @param uri is a string\\n     */\\n    function createBoss(string calldata bossId, string calldata name, uint256 maxHp, string calldata uri) public {\\n        address operatorAddress = msg.sender;\\n        require(accessControls.hasManagerRole(operatorAddress), \\\"WBB: Unauthorized to create boss\\\");\\n        require(!checkBossExists(bossId), \\\"WBB: Boss already Exists\\\");\\n\\n        Boss storage bossInstance = bosses[bossId];\\n\\n        bossInstance.bossId = bossId;\\n        bossInstance.name = name;\\n        bossInstance.maxHp = maxHp;\\n        bossInstance.uri = uri;\\n        bossInstance.status = true;\\n        bossList.push(bossId);\\n        bossExists[bossId] = true;\\n\\n        bossInstance.index = bossList.length - 1;\\n        emit CreateBoss(operatorAddress, bossId, name, maxHp, uri);\\n    }\\n\\n    /**\\n     * @notice function to update the boss character\\n     * @param bossId which is a string and identify boss,\\n     * @param name which is name of string,\\n     * @param maxHp is uint that have boss health and\\n     * @param uri is a string\\n     */\\n    function updateBoss(string calldata bossId, string calldata name, uint256 maxHp, string calldata uri) public {\\n        address operatorAddress = msg.sender;\\n        require(accessControls.hasManagerRole(operatorAddress), \\\"WBB: Unauthorized to update boss\\\");\\n        require(checkBossExists(bossId), \\\"WBB: Boss doesn't exist\\\");\\n\\n        Boss storage bossInstance = bosses[bossId];\\n        require(!bossInstance.status, \\\"WBB: Boss is active\\\");\\n\\n        bossInstance.bossId = bossId;\\n        bossInstance.name = name;\\n        bossInstance.maxHp = maxHp;\\n        bossInstance.uri = uri;\\n\\n        emit UpdateBoss(operatorAddress, bossId, name, maxHp, uri);\\n    }\\n\\n    /// @notice return the list of all bosses\\n    function getAllBosses() public view virtual returns (string[] memory) {\\n        return bossList;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] __gap;\\n}\\n\",\"keccak256\":\"0x298ec45a0e77d479cab3077001ed61a2037a6aeb7f0759926a1f2b3f0f7dba5e\",\"license\":\"MIT\"},\"contracts/game/WBBData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n/// @title Battle related actions and datastructures\\n/// @notice you can use this contract for only creating and updating boss and battle\\ncontract WBBData {\\n    event CreateBattle(address indexed _operatorAddress, string _battleId, string[] _bossIds, uint256 _startTime, uint256 _endTime);\\n    event UpdateBattle(address indexed _operatorAddress, string _battleId, uint256 _startTime, uint256 _endTime);\\n    event CreateBoss(address indexed _operatorAddress, string _bossId, string _name, uint256 _maxHp, string _uri);\\n    event UpdateBoss(address indexed _operatorAddress, string _bossId, string _name, uint256 _maxHp, string _uri);\\n    event SetBossStatus(address indexed _operator, string _bossId, bool _status);\\n    event SetBattleStatus(address indexed _operator, string _battleId, bool _status);\\n\\n    /** @notice Data structure to store the information of a battle.\\n     *  @field battleId The unique identifier for the battle.\\n     *  @field bossIds The unique identifier for the bosses in the battle.\\n     *  @field bossCount The number of bosses in the battle.\\n     *  @field startTime The time at which the battle starts (in Unix timestamp format).\\n     *  @field endTime The time at which the battle ends (in Unix timestamp format).\\n     *  @field status The current status of the battle (true for enabled, false for disabled).\\n     *  @field index An internal index used to keep track of the battle.\\n     */\\n    struct Battle {\\n        string battleId;\\n        string[] bossIds;\\n        uint256 bossCount;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool status;\\n        uint index;\\n    }\\n\\n    /**\\n     * @notice Data structure to store the information of a boss.\\n     * @field bossId The unique identifier for the boss.\\n     * @field name The name of the boss.\\n     * @field maxHp The maximum hit points of the boss.\\n     * @field uri The URI where more information about the boss can be found.\\n     * @field status The current status of the boss (true for enabled, false for disabled).\\n     * @field index An internal index used to keep track of the boss.\\n     */\\n    struct Boss {\\n        string bossId;\\n        string name;\\n        uint256 maxHp;\\n        string uri;\\n        bool status;\\n        uint256 index;\\n    }\\n\\n    /// @notice Mapping of battle data, where the key is the battle's identifier and the value is the battle's data structure.\\n    mapping(string => Battle) public battles;\\n\\n    /// @notice An array of all the battle identifiers that have been created.\\n    string[] public battleList;\\n\\n    /// @notice Mapping of boss data, where the key is the boss's identifier and the value is the boss's data structure.\\n    mapping(string => Boss) public bosses;\\n\\n    /// @notice An array of all the boss identifiers that have been created.\\n    string[] public bossList;\\n\\n    /// @notice A mapping of all battle with exists status.\\n    mapping(string => bool) public battleExists;\\n\\n    /// @notice A mapping of all bosses with exists status.\\n    mapping(string => bool) public bossExists;\\n}\\n\",\"keccak256\":\"0x4dc79623654d53af4ffdb75b9020302553743d74aa2dcc9c50418b8dade6c793\",\"license\":\"MIT\"},\"contracts/game/WorldBossBattle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./WBBActions.sol\\\";\\n\\nimport \\\"./interfaces/IToken.sol\\\";\\nimport \\\"./interfaces/ICDHNFTInventory.sol\\\";\\nimport \\\"./interfaces/IWBBActions.sol\\\";\\nimport \\\"./interfaces/GameStakeOps.sol\\\";\\nimport \\\"./interfaces/IGameAccessControls.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\nerror NotEnoughTokens();\\n\\n/**\\n * @title WorldBossBattle, the game will support NFTs for in-game items and stakes the NFTs to join the P2E event.\\n * @notice you can use this contract for only staking, un-staking and re-staking the NFTs\\n * @dev BattleOps are being inherited in this contract\\n */\\n\\ncontract WorldBossBattle is Initializable, ContextUpgradeable, GameStakeOps, PausableUpgradeable, ReentrancyGuardUpgradeable, ERC1155Holder {\\n    using ECDSA for bytes32;\\n\\n    /// @notice Event for when setting ERC20 Token contract which emits old token address and new token address along with sender address\\n    event SetTokenContract(address indexed _oldTokenContract, address indexed _newTokenContract, address _sender);\\n    /// @notice Event for when setting NFT contract which emits old NFT address and new NFT address along with sender address\\n    event SetNFTContract(address indexed _oldNFTContract, address indexed _nftContract, address _sender);\\n    /// @notice Event for setting WBBActions contract Address which emits old WBBActions address and new WBBActions address along with sender address\\n    event SetWBBActionsAddress(address indexed _oldWBBActionsAddress, address indexed _newWBBActionsAddress, address _sender);\\n    /// @notice Event for when setting maximum number of token a user can stake which emits old count and new count address along with sender address\\n    event SetMaxStakeCount(uint256 _maxOldCount, uint256 _maxNewCount, address _sender);\\n    /// @notice Event for setting cooldown period for user to be able to restake / unstake token\\n    event SetCoolDownPeriod(uint256 _coolDownPeriod, uint256 _newCoolDownPeriod, address _sender);\\n    /// @notice Event is emitted when NFT is staked with owner address, token id and in which battle the token is staked\\n    event NFTStaked(address indexed _nftOwner, uint256 _tokenId, string _battleId, uint256 _stakedTokenTime);\\n    /// @notice Event is emitted when NFT is un-staked with owner address, token id and in which battle the token is un-staked\\n    event NFTUnstaked(address indexed _nftReceiver, uint256 _tokenId, string _battleId);\\n    /// @notice Event is emitted when battle period unstake status is set\\n    event SetBattlePeriodUnstakeStatus(address indexed setterAddress, bool _status);\\n    /// @notice Event is emitted when minimum tokens required to stake is set\\n    event SetMinTokensRequired(address _sender, uint256 _oldMinTokensRequired, uint256 _newMinTokensRequired);\\n\\n    /// @notice to store cdhNFT contract address\\n    ICDHNFTInventory public cdhNFT;\\n    /// @notice to store ERC20 token contract\\n    IToken public tokenAddress;\\n\\n    IWBBActions public wbbActions;\\n    IGameAccessControls public accessControls;\\n    uint256 public lastInteractionTime;\\n\\n    /// @notice to store data of staker\\n    struct TokenStaker {\\n        mapping(string => uint256[]) battleTokenIds;\\n        mapping(uint256 => uint256) tokenIndex;\\n        mapping(uint256 => uint256) stakedTokenTime;\\n        uint256 blockNumber;\\n    }\\n\\n    /// @notice List of stakers address\\n    address[] public stakersAddress;\\n\\n    /// @notice Mapping for TokenStakers\\n    mapping(address => TokenStaker) public stakers;\\n\\n    /// @notice Mapping of tokenId to owner's address\\n    mapping(uint256 => address) public tokenOwner;\\n\\n    /// @notice maps tokenId to battleId\\n    mapping(uint256 => string) public tokenToBattleId;\\n\\n    ///  to store the cooldownPeriod\\n    uint256 public cooldownPeriod;\\n\\n    /// @notice to store the value in which a user can stake\\n    uint256 public maxStakeCount;\\n\\n    /// @notice Flag to enable or disable the battle unstake period.\\n    /// @dev true - unstake after cool down period end, false - unstake after battle ends\\n    bool public enableBattlePeriodUnstake;\\n\\n    /// @notice minimum Tokens for staking\\n    uint256 public minTokensRequired;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Since it is upgradable function it is initialized instead of using constructor\\n     * @param _cdhNFTAddress Contract address for NFT Inventory,\\n     * @param _tokenAddress Contract address for ERC20 token\\n     * @param _maxStakeCount Number of tokens\\n     * @param _wbbActionsAddress Contract address for WorldBossBattle Actions\\n     * @param _accessControls Contract address for access controls\\n     */\\n    function initialize(\\n        ICDHNFTInventory _cdhNFTAddress,\\n        IToken _tokenAddress,\\n        uint256 _maxStakeCount,\\n        IWBBActions _wbbActionsAddress,\\n        IGameAccessControls _accessControls\\n    ) public initializer {\\n        cdhNFT = _cdhNFTAddress;\\n        tokenAddress = _tokenAddress;\\n\\n        maxStakeCount = _maxStakeCount;\\n        wbbActions = IWBBActions(_wbbActionsAddress);\\n        accessControls = IGameAccessControls(_accessControls);\\n\\n        lastInteractionTime = block.timestamp;\\n        minTokensRequired = 100;\\n\\n        __Context_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n    }\\n\\n    modifier whenBattleIsActive(string memory _battleId) {\\n        require(wbbActions.checkBattleStarted(_battleId), \\\"WBB: not started\\\");\\n        require(!wbbActions.checkBattleEnded(_battleId), \\\"WBB: battle ended\\\");\\n        require(wbbActions.checkBattleStatus(_battleId), \\\"WBB: battle not created or active\\\");\\n        _;\\n    }\\n\\n    modifier unstakeValidate(string memory _battleId) {\\n        require(wbbActions.checkBattleStatus(_battleId), \\\"WBB: battle not created or active\\\");\\n        if (!enableBattlePeriodUnstake) {\\n            require(wbbActions.checkBattleEnded(_battleId), \\\"WBB: Battle not ended.\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice function to change the contract address of ERC20 token\\n     * @param _tokenAddress is the new token address\\n     * @dev only authorized addresses could change token contract address\\n     */\\n    function setToken(address _tokenAddress) external {\\n        address msgSender = _msgSender();\\n        require(accessControls.hasManagerRole(msgSender), \\\"WBB: Unauthorized\\\");\\n        require(_tokenAddress != address(0), \\\"WBB: Invalid token address\\\");\\n\\n        emit SetTokenContract(address(tokenAddress), _tokenAddress, msgSender);\\n        tokenAddress = IToken(_tokenAddress);\\n    }\\n\\n    /**\\n     * @notice function to change the contract address of CDH NFT\\n     * @param _nftContract new NFT address\\n     * @dev only authorized addresses could change NFT contract address\\n     */\\n    function setCDHNFTContractAddress(address _nftContract) external {\\n        address msgSender = _msgSender();\\n        require(accessControls.hasManagerRole(msgSender), \\\"WBB: Unauthorized\\\");\\n        require(_nftContract != address(0), \\\"WBB: Invalid NFT contract\\\");\\n\\n        emit SetNFTContract(address(cdhNFT), _nftContract, msgSender);\\n        cdhNFT = ICDHNFTInventory(_nftContract);\\n    }\\n\\n    /**\\n     * @notice Change the WBBActionsContract address that will set WBBActionsContract\\n     * @param _wbbActionsAddress new wbbActionsContract address\\n     * @dev only authorized addresses could change WBB Actions contract address\\n     */\\n    function setWBBActionsContract(address _wbbActionsAddress) external {\\n        address msgSender = _msgSender();\\n        require(accessControls.hasManagerRole(msgSender), \\\"WBB: Unauthorized\\\");\\n        require(_wbbActionsAddress != address(0), \\\"WBB: Invalid Actions contract\\\");\\n\\n        emit SetWBBActionsAddress(address(wbbActions), _wbbActionsAddress, msgSender);\\n        wbbActions = IWBBActions(_wbbActionsAddress);\\n    }\\n\\n    /**\\n     * @notice Check the limit of token that can be staked\\n     * @param tokenLength number of tokenIDs that about to staked\\n     */\\n    function validStakeCount(uint256 tokenLength, string memory _battleId, address _player) public view returns (bool) {\\n        return (stakers[_player].battleTokenIds[_battleId].length + tokenLength) <= maxStakeCount;\\n    }\\n\\n    /**\\n     * @notice function to set the limit of token that can be staked\\n     */\\n    function setMaxStakeCount(uint256 _maxCount) external {\\n        address msgSender = _msgSender();\\n        require(accessControls.hasManagerRole(msgSender), \\\"WBB: Unauthorized\\\");\\n        emit SetMaxStakeCount(maxStakeCount, _maxCount, msgSender);\\n        maxStakeCount = _maxCount;\\n    }\\n\\n    /**\\n     * @notice to set the cooldown period\\n     * @param _time in unix\\n     * @return _time\\n     */\\n    function setCoolDownPeriod(uint256 _time) external returns (uint256) {\\n        address msgSender = _msgSender();\\n        require(accessControls.hasManagerRole(msgSender), \\\"WBB: Unauthorized\\\");\\n\\n        emit SetCoolDownPeriod(cooldownPeriod, _time, msgSender);\\n        cooldownPeriod = _time;\\n        return cooldownPeriod;\\n    }\\n\\n    /**\\n     * @notice Set the boolean status to enable Battle period stake\\n     * @param _unstakeStatus boolean\\n     */\\n    function setBattlePeriodUnstakeStatus(bool _unstakeStatus) external {\\n        address msgSender = _msgSender();\\n\\n        require(accessControls.hasManagerRole(msgSender), \\\"WBB: Unauthorized\\\");\\n        enableBattlePeriodUnstake = _unstakeStatus;\\n        emit SetBattlePeriodUnstakeStatus(msgSender, _unstakeStatus);\\n    }\\n\\n    /**\\n     * @notice Set the minimum number of tokens required for staking nft in WBB\\n     * @param _value a uint value for setting minimum tokens required.\\n     */\\n    function setMinTokensRequired(uint256 _value) external {\\n        address msgSender = _msgSender();\\n\\n        require(accessControls.hasManagerRole(msgSender), \\\"WBB: Unauthorized\\\");\\n        emit SetMinTokensRequired(msgSender, _value, minTokensRequired);\\n        minTokensRequired = _value;\\n    }\\n\\n    /**************************\\n     *     Game Operations    *\\n     **************************/\\n\\n    /**\\n     * @notice function to get the latest battle that is created\\n     */\\n    function latestBattle() public view returns (string memory) {\\n        return wbbActions.getLatestBattle();\\n    }\\n\\n    /**\\n     * @param _pastBattleId Previous battleID\\n     * @param _player Address of player checking eligibility of\\n     * @return boolean if statement is true\\n     */\\n    function isEligibleToStake(string calldata _pastBattleId, address _player) public view returns (bool) {\\n        return stakers[_player].battleTokenIds[_pastBattleId].length > 0;\\n    }\\n\\n    /**\\n     * @notice Internal methods for staking operations\\n     * @param _nftCount how many nft user have\\n     * @param _balance user ERC20 token balance\\n     * @return true if he has higher ERC20 token balance than required\\n     */\\n    function checkRequiredTokenBalance(uint256 _nftCount, uint256 _balance) public view returns (bool) {\\n        uint256 requiredBalance = (_nftCount * minTokensRequired) * 10 ** 18;\\n        return _balance >= requiredBalance;\\n    }\\n\\n    /**\\n     * @notice function to see user stakedTokenTime for specific tokenId\\n     * @param _player Address of player getting staked time for token\\n     * @param _tokenId Staked TokenID\\n     */\\n    function getStakedTokenTime(address _player, uint256 _tokenId) public view returns (uint256) {\\n        TokenStaker storage staker = stakers[_player];\\n        return staker.stakedTokenTime[_tokenId];\\n    }\\n\\n    /// STAKE Operations\\n\\n    /**\\n     * @notice function to get all the token that a address has in the Inventory contract\\n     * @param _player Address of the player to get all tokens\\n     */\\n    function getAllToken(address _player) public view returns (uint256[] memory) {\\n        uint256[] memory allTokens = cdhNFT.getAllTokens(_player);\\n        return allTokens;\\n    }\\n\\n    /**\\n     * @notice Function to stake a single CDHNFT that sender owns\\n     * @param _tokenId TokenID of CDH NFT\\n     * @param _battleId is unique battle in which the NFT will be staked\\n     * @dev it calls internalStake function for further processing\\n     */\\n    function stake(uint256 _tokenId, string memory _battleId) external override whenBattleIsActive(_battleId) {\\n        require(validStakeCount(1, _battleId, msg.sender), \\\"WBB: Max tokens staked.\\\");\\n        internalStake(_msgSender(), _tokenId, _battleId);\\n        ICDHNFTInventory(cdhNFT).safeTransferFrom(_msgSender(), address(this), _tokenId, 1, \\\"0x\\\");\\n    }\\n\\n    /**\\n     * @notice Function to stake a array of CDH NFT that sender owns\\n     * @param tokenIds is an array of tokenId of CDH NFT\\n     * @param _battleId is unique battle in which the NFT will be staked\\n     * @dev it calls internalStake function for further processing\\n     */\\n    function stakeTokens(uint256[] memory tokenIds, string memory _battleId) external override whenBattleIsActive(_battleId) {\\n        address player = _msgSender();\\n        require(validStakeCount(tokenIds.length, _battleId, player), \\\"WBB: Max tokens staked.\\\");\\n        uint256[] memory tokenAmounts = new uint256[](tokenIds.length);\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            internalStake(player, tokenIds[i], _battleId);\\n            tokenAmounts[i] = 1;\\n        }\\n        ICDHNFTInventory(cdhNFT).safeBatchTransferFrom(player, address(this), tokenIds, tokenAmounts, \\\"0x\\\");\\n    }\\n\\n    /**\\n     * @notice internal function where actual staking works\\n     * @param _player is address of a user\\n     * @param _tokenId is tokenId that user have\\n     * @param _battleId in which the token id will be staked\\n     */\\n    function internalStake(address _player, uint256 _tokenId, string memory _battleId) internal whenNotPaused nonReentrant {\\n        require(tokenOwner[_tokenId] == address(0), \\\"WBB: Token already staked\\\");\\n\\n        TokenStaker storage staker = stakers[_player];\\n\\n        uint256[] memory existingStakedTokens = staker.battleTokenIds[_battleId];\\n        uint256 existingStakedTokensCount = existingStakedTokens.length;\\n\\n        uint256 tokenBalance = tokenAddress.balanceOf(_player);\\n\\n        if (checkRequiredTokenBalance(existingStakedTokensCount + 1, tokenBalance)) {\\n            staker.blockNumber = block.number;\\n            staker.battleTokenIds[_battleId].push(_tokenId);\\n            staker.tokenIndex[_tokenId] = staker.battleTokenIds[_battleId].length - 1;\\n            staker.stakedTokenTime[_tokenId] = block.timestamp;\\n            tokenOwner[_tokenId] = _player;\\n            tokenToBattleId[_tokenId] = _battleId;\\n\\n            if (existingStakedTokensCount == 0) {\\n                stakersAddress.push(_player);\\n            }\\n\\n            emit NFTStaked(_player, _tokenId, _battleId, block.timestamp);\\n        } else {\\n            revert NotEnoughTokens();\\n        }\\n    }\\n\\n    /**\\n     * @notice Get all the tokens staked by user in the battleId\\n     * @param _player is the user address\\n     */\\n    function getStakedTokensForBattle(address _player, string calldata _battleId) public view returns (uint256[] memory tokenIds) {\\n        return stakers[_player].battleTokenIds[_battleId];\\n    }\\n\\n    /// UN-STAKE Operations\\n\\n    /**\\n     * @notice public function to unstake a single CDHNFT that sender owns\\n     * @param _tokenId TokenId of CDH NFT\\n     * @param _battleId is unique battle from which the NFT will be unstaked\\n     * @dev Calls internalUnStake function for unstaking tokens\\n     */\\n    function unstake(uint256 _tokenId, string calldata _battleId) external override unstakeValidate(_battleId) {\\n        address player = _msgSender();\\n        internalUnstake(player, _tokenId, _battleId);\\n        ICDHNFTInventory(cdhNFT).safeTransferFrom(address(this), player, _tokenId, 1, \\\"0x\\\");\\n    }\\n\\n    /**\\n     * @notice public function to unstake all CDHNFT that sender owns\\n     * @param _battleId is unique battle in which the NFT will be unstaked\\n     * @dev it calls internalUnStakeAll function for further processing\\n     */\\n    function unstakeAll(string calldata _battleId) external override unstakeValidate(_battleId) {\\n        address player = _msgSender();\\n        internalUnstakeAll(player, _battleId);\\n    }\\n\\n    /**\\n     * @notice public function to unstake an array of  CDHNFT that sender owns\\n     * @param tokenIds is tokenId of CDHNFT\\n     * @param _battleId is unique battle in which the NFT will be unstaked\\n     * @dev it calls internalUnStake function for further processing\\n     */\\n    function unstakeTokens(uint256[] memory tokenIds, string calldata _battleId) external override unstakeValidate(_battleId) {\\n        address player = _msgSender();\\n        uint256[] memory tokenAmounts = new uint256[](tokenIds.length);\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            internalUnstake(player, tokenIds[i], _battleId);\\n            tokenAmounts[i] = 1;\\n        }\\n        ICDHNFTInventory(cdhNFT).safeBatchTransferFrom(address(this), player, tokenIds, tokenAmounts, \\\"0x\\\");\\n    }\\n\\n    /**\\n     * @notice internal function where actual unstaking works\\n     * @param _player is address of a user\\n     * @param _tokenId is tokenid that user staked\\n     * @param _battleId in which the token id will be unstaked\\n     */\\n    function internalUnstake(address _player, uint256 _tokenId, string calldata _battleId) internal nonReentrant {\\n        require(tokenOwner[_tokenId] == _player, \\\"WBB: Unauthorized.\\\");\\n\\n        require(keccak256(bytes(tokenToBattleId[_tokenId])) == keccak256(bytes(_battleId)), \\\"WBB: Card not staked in given battle\\\");\\n\\n        TokenStaker storage staker = stakers[_player];\\n\\n        if (enableBattlePeriodUnstake) {\\n            require(\\n                block.timestamp > (staker.stakedTokenTime[_tokenId] + cooldownPeriod) && !wbbActions.checkBattleEnded(_battleId),\\n                \\\"WBB: cooldown not over\\\"\\n            );\\n        }\\n\\n        uint256 tokenIdIndex = staker.tokenIndex[_tokenId];\\n        uint256 battleTokenIdsLength = staker.battleTokenIds[_battleId].length;\\n\\n        uint256 tokenBalance = tokenAddress.balanceOf(_player);\\n        require(checkRequiredTokenBalance(battleTokenIdsLength, tokenBalance), \\\"WBB: Insufficient token balance\\\");\\n\\n        uint256 lastBattleTokenId = staker.battleTokenIds[_battleId][battleTokenIdsLength - 1];\\n        staker.battleTokenIds[_battleId].pop();\\n        if (staker.battleTokenIds[_battleId].length > 0) {\\n            if (lastBattleTokenId != _tokenId) {\\n                staker.battleTokenIds[_battleId][tokenIdIndex] = lastBattleTokenId;\\n                staker.tokenIndex[lastBattleTokenId] = tokenIdIndex;\\n                delete staker.tokenIndex[_tokenId];\\n            }\\n        }\\n        staker.stakedTokenTime[_tokenId] = 0;\\n\\n        if (staker.battleTokenIds[_battleId].length == 0) {\\n            address lastStakerAddress = stakersAddress[stakersAddress.length - 1];\\n            if (stakersAddress.length > 0) {\\n                uint256 stakerIndex = 0;\\n                for (uint256 i = 0; i < stakersAddress.length; i++) {\\n                    if (stakersAddress[i] == _player) {\\n                        stakerIndex = i;\\n                        break;\\n                    }\\n                }\\n                stakersAddress[stakerIndex] = lastStakerAddress;\\n            }\\n            stakersAddress.pop();\\n        }\\n        delete tokenOwner[_tokenId];\\n        delete tokenToBattleId[_tokenId];\\n\\n        emit NFTUnstaked(_player, _tokenId, _battleId);\\n    }\\n\\n    /**\\n     * @notice internal function for unstaking all the tokens\\n     * @param _player is address of a user\\n     * @param _battleId in which the token id will be unstaked\\n     */\\n    function internalUnstakeAll(address _player, string calldata _battleId) internal {\\n        uint256[] memory stakedToken = stakers[_player].battleTokenIds[_battleId];\\n        uint256 nftCounts = stakedToken.length;\\n        uint256[] memory tokenAmounts = new uint256[](stakedToken.length);\\n        require(nftCounts > 0, \\\"WBB: NFTs aren't staked\\\");\\n        for (uint i = 0; i < nftCounts; i++) {\\n            internalUnstake(_player, stakedToken[i], _battleId);\\n            tokenAmounts[i] = 1;\\n        }\\n        ICDHNFTInventory(cdhNFT).safeBatchTransferFrom(address(this), _player, stakedToken, tokenAmounts, \\\"0x\\\");\\n    }\\n\\n    /**\\n     * @notice internal function where unstaking works for batch\\n     * @param _player is address of a user\\n     * @param _tokenIds is tokenid that user have\\n     * @param _battleId in which the token id will be unstaked\\n     */\\n    function internalUnstakeBatch(address _player, uint256[] memory _tokenIds, string calldata _battleId) internal {\\n        uint256[] memory tokenAmounts = new uint256[](_tokenIds.length);\\n        for (uint i = 0; i < _tokenIds.length; i++) {\\n            internalUnstake(_player, _tokenIds[i], _battleId);\\n            tokenAmounts[i] = 1;\\n        }\\n        ICDHNFTInventory(cdhNFT).safeBatchTransferFrom(address(this), _player, _tokenIds, tokenAmounts, \\\"0x\\\");\\n    }\\n\\n    /**\\n     * @notice Internal function to unstake all CDHNFT that sender owns\\n     * @param _battleId unique battle in which the NFT will be unstaked\\n     * @param _player the address of a user which nft will be unstaked\\n     * @dev it calls internalUnStakeAll function for further processing\\n     */\\n    function unstakeAllInternal(address _player, string calldata _battleId) external unstakeValidate(_battleId) {\\n        require(accessControls.hasManagerRole(_msgSender()), \\\"WBB: Unauthorized\\\");\\n        internalUnstakeAll(_player, _battleId);\\n    }\\n\\n    /**\\n     * @notice Internal function to unstake tokens CDHNFT that sender owns\\n     * @param _battleId unique battle in which the NFT will be unstaked\\n     * @param _tokenIds tokenid that user staked\\n     * @param _player the address of a user which nft will be unstaked\\n     * @dev it calls internalUnStakeAll function for further processing\\n     */\\n    function unstakeTokensInternal(address _player, uint256[] memory _tokenIds, string calldata _battleId) external unstakeValidate(_battleId) {\\n        require(accessControls.hasManagerRole(_msgSender()), \\\"WBB: Unauthorized\\\");\\n        internalUnstakeBatch(_player, _tokenIds, _battleId);\\n    }\\n\\n    /**\\n     * @notice Pause contract so users wont be able to stake new tokens\\n     */\\n    function pause() external {\\n        require(accessControls.hasManagerRole(_msgSender()), \\\"WBB: Unauthorized\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice UnPause contract so users be able to stake new tokens again\\n     */\\n    function unpause() external {\\n        require(accessControls.hasManagerRole(_msgSender()), \\\"WBB: Unauthorized\\\");\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] __gap;\\n}\\n\",\"keccak256\":\"0x587be50f099c09e165bf35ab43ac91adfb84b75771c3b7bdd35d22df517223fc\",\"license\":\"MIT\"},\"contracts/game/interfaces/GameStakeOps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @title A interface of worldBattleBoss contract\\n/// @notice this interface is used in main contract\\n/// @dev all the funtion present here might be overridden\\ninterface GameStakeOps {\\n    function stake(uint256 _tokenId, string calldata _battleId) external;\\n\\n    function stakeTokens(uint256[] memory _tokenIds, string calldata _battleId) external;\\n\\n    function unstake(uint256 _tokenId, string calldata _battleId) external;\\n\\n    function unstakeAll(string calldata _battleId) external;\\n\\n    function unstakeTokens(uint256[] memory _tokenIds, string calldata _battleId) external;\\n}\\n\",\"keccak256\":\"0x4298c343ecf7236a259ff937623e99094b58f8c47a1d0536c4c4d4a46a14a9bd\",\"license\":\"MIT\"},\"contracts/game/interfaces/ICDHNFTInventory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @title A interface of CDH Inventory NFT\\n/// @notice this is used to help interact with real CDH Inventory\\ninterface ICDHNFTInventory {\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, uint256 amount, bytes calldata data) external;\\n\\n    function safeBatchTransferFrom(address from, address to, uint256[] memory tokenId, uint256[] memory amount, bytes calldata data) external;\\n\\n    function getAllTokens(address user) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x2906b8e230712a6f3a9961a993597c4575c3666769e57733500e1a33a92c29c3\",\"license\":\"MIT\"},\"contracts/game/interfaces/IGameAccessControls.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @title A interface of CDH Tower token\\n/// @notice this is used to help interact with real tower token\\ninterface IGameAccessControls {\\n    function hasManagerRole(address _address) external view returns (bool);\\n\\n    function hasAdminRole(address _address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcd5244690570b4ea616fe25c50fb605db3f667dd3e4e3e2e70e37cc4ef3b9457\",\"license\":\"MIT\"},\"contracts/game/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @title A interface of CDH Tower token\\n/// @notice this is used to help interact with real tower token\\ninterface IToken {\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function safeTransferFrom(address from, address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x3d8b875ce9b79172d4339ea8a6ee4152d82257e9d16cfab0aa27b4ccad00c363\",\"license\":\"MIT\"},\"contracts/game/interfaces/IWBBActions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @title A interface of WorldBattleBoss Actions contract\\n/// @notice this interface is used for interface of Actions to use in WBB main contract\\ninterface IWBBActions {\\n    function checkBattleExists(string calldata _battleId) external view returns (bool);\\n\\n    function setBattleStatus(string calldata _battleId, bool _status) external;\\n\\n    function createBattle(string calldata _battleId, string[] memory _bossIds, uint256 _startTime, uint256 _endTime) external;\\n\\n    function updateBattle(string calldata _battleId, uint256 _startTime, uint256 _endTime) external;\\n\\n    function checkBattleStatus(string calldata _battleId) external view returns (bool);\\n\\n    function checkBattleEnded(string calldata _battleId) external view returns (bool);\\n\\n    function checkBattleStarted(string calldata _battleId) external view returns (bool);\\n\\n    function getBattlePeriod(string calldata _battleId) external view returns (uint256 startTime, uint256 endTime);\\n\\n    function getLatestBattle() external view returns (string calldata battleId);\\n\\n    function checkBossExists(string calldata _bossId) external view returns (bool);\\n\\n    function setBossStatus(string calldata _bossId, bool _status) external;\\n\\n    function checkActiveBosses(string[] memory _bossId) external;\\n\\n    function checkBossStatus(string calldata _bossId) external view returns (bool);\\n\\n    function createBoss(string calldata bossId, string calldata name, uint256 maxHp, string calldata uri) external;\\n\\n    function updateBoss(string calldata bossId, string calldata name, uint256 maxHp, string calldata uri) external;\\n}\\n\",\"keccak256\":\"0x2e3856f1ebd4deee9b8ff54c5eab14b866b2f0170336753a33a469be623f1919\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61574080620000f46000396000f3fe608060405234801561001057600080fd5b50600436106102d35760003560e01c80639168ae7211610186578063bc197c81116100e3578063d2bd85d611610097578063e7e4e1f711610071578063e7e4e1f7146106a8578063ee20aed0146106bb578063f23a6e61146106ce57600080fd5b8063d2bd85d614610679578063d7c15bf61461068c578063dee2d74c1461069557600080fd5b8063c7c8afbc116100c8578063c7c8afbc1461064a578063ca4c20d01461065d578063d0a068ff1461066657600080fd5b8063bc197c81146105ce578063c46d0c931461063757600080fd5b80639e8ccaf11161013a578063a90d86671161011f578063a90d866714610595578063ab5dc685146105a8578063b345b8c0146105bb57600080fd5b80639e8ccaf11461056c578063a8bc29a61461058c57600080fd5b806395fbf3a91161016b57806395fbf3a9146105315780639b6c2682146105395780639d76ea581461054c57600080fd5b80639168ae7214610501578063951a56831461052457600080fd5b806333e1a22311610234578063736f616b116101e8578063751408c5116101cd578063751408c5146104d357806379e5e03b146104e65780638456cb59146104f957600080fd5b8063736f616b146104a0578063748365ef146104b357600080fd5b80635acf099c116102195780635acf099c1461043b5780635c975abb146104825780636f74ecbf1461048d57600080fd5b806333e1a223146104205780633f4ba83a1461043357600080fd5b80631caaa4871161028b5780632ac34bc1116102705780632ac34bc1146103da5780632e4723fd146103ed5780632fc5dcea1461040d57600080fd5b80631caaa4871461038457806328fb7745146103ba57600080fd5b806304646a49116102bc57806304646a4914610313578063144fa6d71461032a5780631b48ba071461033f57600080fd5b806301ffc9a7146102d85780630421af7814610300575b600080fd5b6102eb6102e6366004614879565b610706565b60405190151581526020015b60405180910390f35b6102eb61030e3660046148bb565b61079f565b61031c60a05481565b6040519081526020016102f7565b61033d6103383660046148ff565b6107cd565b005b60995461035f9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102f7565b61035f61039236600461491c565b609e6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6103cd6103c83660046148ff565b6109e9565b6040516102f79190614970565b61033d6103e8366004614b27565b610aab565b6104006103fb36600461491c565b610f7d565b6040516102f79190614bf9565b61033d61041b366004614c55565b611017565b61033d61042e366004614cce565b61139c565b61033d6115c0565b61031c610449366004614d36565b73ffffffffffffffffffffffffffffffffffffffff919091166000908152609d6020908152604080832093835260029093019052205490565b60335460ff166102eb565b61033d61049b36600461491c565b6116dc565b61031c6104ae36600461491c565b61183a565b609a5461035f9073ffffffffffffffffffffffffffffffffffffffff1681565b61035f6104e136600461491c565b61199b565b6102eb6104f4366004614d62565b6119d2565b61033d611a32565b61031c61050f3660046148ff565b609d6020526000908152604090206003015481565b60a2546102eb9060ff1681565b610400611b4c565b61033d61054736600461491c565b611c07565b60985461035f9073ffffffffffffffffffffffffffffffffffffffff1681565b60975461035f9073ffffffffffffffffffffffffffffffffffffffff1681565b61031c609b5481565b61033d6105a3366004614dbd565b611d63565b61033d6105b6366004614e09565b61202d565b61033d6105c93660046148ff565b6123d1565b6106066105dc366004614e65565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016102f7565b61033d6106453660046148ff565b6125e8565b6102eb610658366004614f13565b6127ff565b61031c60a35481565b61033d610674366004614f5f565b612851565b61033d610687366004614f9b565b612bd4565b61031c60a15481565b6103cd6106a3366004614f5f565b612e40565b61033d6106b6366004614fdd565b612eda565b61033d6106c9366004615028565b6132ee565b6106066106dc366004615045565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000148061079957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60008060a354846107b091906150dd565b6107c290670de0b6b3a76400006150dd565b909210159392505050565b600033609a546040517f5026c82600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152929350911690635026c82690602401602060405180830381865afa158015610842573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086691906150f4565b6108d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821661094e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5742423a20496e76616c696420746f6b656e206164647265737300000000000060448201526064016108c8565b60985460405173ffffffffffffffffffffffffffffffffffffffff83811682528481169216907f674d28769cbbfd17daf174e00c6a31cb6d8a30ac58fd38b1098bb2267a888d049060200160405180910390a350609880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6097546040517f178b6de600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015260609260009291169063178b6de690602401600060405180830381865afa158015610a5e573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610aa49190810190615111565b9392505050565b6099546040517fb778e183000000000000000000000000000000000000000000000000000000008152829173ffffffffffffffffffffffffffffffffffffffff169063b778e18390610b01908490600401614bf9565b602060405180830381865afa158015610b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4291906150f4565b610ba8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5742423a206e6f7420737461727465640000000000000000000000000000000060448201526064016108c8565b6099546040517f47ff16ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906347ff16ac90610bfe908490600401614bf9565b602060405180830381865afa158015610c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3f91906150f4565b15610ca6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20626174746c6520656e64656400000000000000000000000000000060448201526064016108c8565b6099546040517f5d49778900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690635d49778990610cfc908490600401614bf9565b602060405180830381865afa158015610d19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3d91906150f4565b610dc9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5742423a20626174746c65206e6f742063726561746564206f7220616374697660448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016108c8565b82513390610dd89084836119d2565b610e3e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5742423a204d617820746f6b656e73207374616b65642e00000000000000000060448201526064016108c8565b6000845167ffffffffffffffff811115610e5a57610e5a614983565b604051908082528060200260200182016040528015610e83578160200160208202803683370190505b50905060005b8551811015610ee757610eb683878381518110610ea857610ea86151a2565b60200260200101518761346b565b6001828281518110610eca57610eca6151a2565b602090810291909101015280610edf816151d1565b915050610e89565b506097546040517f2eb2c2d600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632eb2c2d690610f4490859030908a908790600401615209565b600060405180830381600087803b158015610f5e57600080fd5b505af1158015610f72573d6000803e3d6000fd5b505050505050505050565b609f6020526000908152604090208054610f9690615291565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc290615291565b801561100f5780601f10610fe45761010080835404028352916020019161100f565b820191906000526020600020905b815481529060010190602001808311610ff257829003601f168201915b505050505081565b81818080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506099546040517f5d49778900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169250635d49778991506110a3908490600401614bf9565b602060405180830381865afa1580156110c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e491906150f4565b611170576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5742423a20626174746c65206e6f742063726561746564206f7220616374697660448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016108c8565b60a25460ff16611277576099546040517f47ff16ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906347ff16ac906111d0908490600401614bf9565b602060405180830381865afa1580156111ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121191906150f4565b611277576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5742423a20426174746c65206e6f7420656e6465642e0000000000000000000060448201526064016108c8565b609a5473ffffffffffffffffffffffffffffffffffffffff16635026c826336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa1580156112ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132391906150f4565b611389576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064016108c8565b6113958585858561383d565b5050505050565b600054610100900460ff16158080156113bc5750600054600160ff909116105b806113d65750303b1580156113d6575060005460ff166001145b611462576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016108c8565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156114c057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6097805473ffffffffffffffffffffffffffffffffffffffff8089167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556098805488841690831617905560a186905560998054868416908316179055609a80549285169290911691909117905542609b55606460a355611545613944565b61154d6139db565b611555613a7a565b80156115b857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b609a5473ffffffffffffffffffffffffffffffffffffffff16635026c826336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa158015611648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166c91906150f4565b6116d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064016108c8565b6116da613b19565b565b600033609a546040517f5026c82600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152929350911690635026c82690602401602060405180830381865afa158015611751573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177591906150f4565b6117db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064016108c8565b60a3546040805173ffffffffffffffffffffffffffffffffffffffff841681526020810185905280820192909252517f7231189f16a6d29158a7ee4029be9651e8cd39d0b9ad99455708b992423ad6c29181900360600190a15060a355565b60008033609a546040517f5026c82600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152929350911690635026c82690602401602060405180830381865afa1580156118b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d491906150f4565b61193a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064016108c8565b60a054604080519182526020820185905273ffffffffffffffffffffffffffffffffffffffff831682820152517f413a859b874b81545b2b22a26facd81777b79bce9f7631657c033f4d4a5d1cbb9181900360600190a1505060a081905590565b609c81815481106119ab57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60a15473ffffffffffffffffffffffffffffffffffffffff82166000908152609d60205260408082209051919291869190611a0e9087906152e4565b90815260405190819003602001902054611a289190615300565b1115949350505050565b609a5473ffffffffffffffffffffffffffffffffffffffff16635026c826336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa158015611aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ade91906150f4565b611b44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064016108c8565b6116da613b96565b609954604080517fbf81ee6d000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163bf81ee6d9160048083019260009291908290030181865afa158015611bbc573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611c029190810190615313565b905090565b600033609a546040517f5026c82600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152929350911690635026c82690602401602060405180830381865afa158015611c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca091906150f4565b611d06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064016108c8565b60a154604080519182526020820184905273ffffffffffffffffffffffffffffffffffffffff831682820152517f13a511f20997079f309d264161b7628709fc727ea5bcd135d26d44d20a7133929181900360600190a15060a155565b81818080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506099546040517f5d49778900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169250635d4977899150611def908490600401614bf9565b602060405180830381865afa158015611e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3091906150f4565b611ebc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5742423a20626174746c65206e6f742063726561746564206f7220616374697660448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016108c8565b60a25460ff16611fc3576099546040517f47ff16ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906347ff16ac90611f1c908490600401614bf9565b602060405180830381865afa158015611f39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5d91906150f4565b611fc3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5742423a20426174746c65206e6f7420656e6465642e0000000000000000000060448201526064016108c8565b33611fd081868686613bf1565b6097546040517ff242432a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063f242432a90610f4490309085908a9060019060040161538a565b81818080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506099546040517f5d49778900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169250635d49778991506120b9908490600401614bf9565b602060405180830381865afa1580156120d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fa91906150f4565b612186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5742423a20626174746c65206e6f742063726561746564206f7220616374697660448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016108c8565b60a25460ff1661228d576099546040517f47ff16ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906347ff16ac906121e6908490600401614bf9565b602060405180830381865afa158015612203573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222791906150f4565b61228d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5742423a20426174746c65206e6f7420656e6465642e0000000000000000000060448201526064016108c8565b8351339060009067ffffffffffffffff8111156122ac576122ac614983565b6040519080825280602002602001820160405280156122d5578160200160208202803683370190505b50905060005b865181101561233a57612309838883815181106122fa576122fa6151a2565b60200260200101518888613bf1565b600182828151811061231d5761231d6151a2565b602090810291909101015280612332816151d1565b9150506122db565b506097546040517f2eb2c2d600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632eb2c2d69061239790309086908b908790600401615209565b600060405180830381600087803b1580156123b157600080fd5b505af11580156123c5573d6000803e3d6000fd5b50505050505050505050565b600033609a546040517f5026c82600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152929350911690635026c82690602401602060405180830381865afa158015612446573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246a91906150f4565b6124d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064016108c8565b73ffffffffffffffffffffffffffffffffffffffff821661254d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5742423a20496e76616c6964204e465420636f6e74726163740000000000000060448201526064016108c8565b60975460405173ffffffffffffffffffffffffffffffffffffffff83811682528481169216907fcc84b7dfa78b34bb94bda9e3e859b03781c64e9c8870f014f905deb5917d1e349060200160405180910390a350609780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600033609a546040517f5026c82600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152929350911690635026c82690602401602060405180830381865afa15801561265d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268191906150f4565b6126e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064016108c8565b73ffffffffffffffffffffffffffffffffffffffff8216612764576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5742423a20496e76616c696420416374696f6e7320636f6e747261637400000060448201526064016108c8565b60995460405173ffffffffffffffffffffffffffffffffffffffff83811682528481169216907f34094423c59427e099490ccde795f4a7c4741be966ee850d712bd3777efd51849060200160405180910390a350609980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff81166000908152609d602052604080822090518291906128379087908790615403565b908152604051908190036020019020541190509392505050565b81818080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506099546040517f5d49778900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169250635d49778991506128dd908490600401614bf9565b602060405180830381865afa1580156128fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291e91906150f4565b6129aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5742423a20626174746c65206e6f742063726561746564206f7220616374697660448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016108c8565b60a25460ff16612ab1576099546040517f47ff16ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906347ff16ac90612a0a908490600401614bf9565b602060405180830381865afa158015612a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a4b91906150f4565b612ab1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5742423a20426174746c65206e6f7420656e6465642e0000000000000000000060448201526064016108c8565b609a5473ffffffffffffffffffffffffffffffffffffffff16635026c826336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa158015612b39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5d91906150f4565b612bc3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064016108c8565b612bce848484614385565b50505050565b81818080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506099546040517f5d49778900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169250635d4977899150612c60908490600401614bf9565b602060405180830381865afa158015612c7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca191906150f4565b612d2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5742423a20626174746c65206e6f742063726561746564206f7220616374697660448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016108c8565b60a25460ff16612e34576099546040517f47ff16ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906347ff16ac90612d8d908490600401614bf9565b602060405180830381865afa158015612daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dce91906150f4565b612e34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5742423a20426174746c65206e6f7420656e6465642e0000000000000000000060448201526064016108c8565b33612bce818585614385565b73ffffffffffffffffffffffffffffffffffffffff83166000908152609d602052604090819020905160609190612e7a9085908590615403565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015612ecc57602002820191906000526020600020905b815481526020019060010190808311612eb8575b505050505090509392505050565b6099546040517fb778e183000000000000000000000000000000000000000000000000000000008152829173ffffffffffffffffffffffffffffffffffffffff169063b778e18390612f30908490600401614bf9565b602060405180830381865afa158015612f4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f7191906150f4565b612fd7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5742423a206e6f7420737461727465640000000000000000000000000000000060448201526064016108c8565b6099546040517f47ff16ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906347ff16ac9061302d908490600401614bf9565b602060405180830381865afa15801561304a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306e91906150f4565b156130d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20626174746c6520656e64656400000000000000000000000000000060448201526064016108c8565b6099546040517f5d49778900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690635d4977899061312b908490600401614bf9565b602060405180830381865afa158015613148573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316c91906150f4565b6131f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5742423a20626174746c65206e6f742063726561746564206f7220616374697660448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016108c8565b613204600183336119d2565b61326a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5742423a204d617820746f6b656e73207374616b65642e00000000000000000060448201526064016108c8565b61327533848461346b565b60975473ffffffffffffffffffffffffffffffffffffffff1663f242432a33308660016040518563ffffffff1660e01b81526004016132b7949392919061538a565b600060405180830381600087803b1580156132d157600080fd5b505af11580156132e5573d6000803e3d6000fd5b50505050505050565b600033609a546040517f5026c82600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152929350911690635026c82690602401602060405180830381865afa158015613363573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061338791906150f4565b6133ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064016108c8565b60a280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001683151590811790915560405190815273ffffffffffffffffffffffffffffffffffffffff8216907fd923d85360f3f592aa7cf591c0f4e489905836ff02f16d7842b6389fcbbb36609060200160405180910390a25050565b613473614578565b61347b6145e5565b6000828152609e602052604090205473ffffffffffffffffffffffffffffffffffffffff1615613507576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5742423a20546f6b656e20616c7265616479207374616b65640000000000000060448201526064016108c8565b73ffffffffffffffffffffffffffffffffffffffff83166000908152609d60205260408082209051909190829061353f9085906152e4565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561359157602002820191906000526020600020905b81548152602001906001019080831161357d575b505083516098546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c811660048301529697509195600095501692506370a082319150602401602060405180830381865afa15801561360e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136329190615413565b9050613648613642836001615300565b8261079f565b156137f85743600385015560405184906136639087906152e4565b908152604051602091819003820181208054600180820183556000928352939091200188905585906136969088906152e4565b908152604051908190036020019020546136b0919061542c565b6000878152600186016020908152604080832093909355600287018152828220429055609e815282822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8c16179055609f9052206137278682615485565b50816000036137a157609c80546001810182556000919091527faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539c0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff89161790555b8673ffffffffffffffffffffffffffffffffffffffff167fa2a4b640524f5410a2969ac3f90a5c7a3197662d845ba3bdf16fe9010e5aad9a8787426040516137eb9392919061559f565b60405180910390a261382a565b6040517f22bbb43c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050506138386001606555565b505050565b6000835167ffffffffffffffff81111561385957613859614983565b604051908082528060200260200182016040528015613882578160200160208202803683370190505b50905060005b84518110156138e7576138b6868683815181106138a7576138a76151a2565b60200260200101518686613bf1565b60018282815181106138ca576138ca6151a2565b6020908102919091010152806138df816151d1565b915050613888565b506097546040517f2eb2c2d600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632eb2c2d690610f44903090899089908790600401615209565b600054610100900460ff166116da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108c8565b600054610100900460ff16613a72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108c8565b6116da61465f565b600054610100900460ff16613b11576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108c8565b6116da614720565b613b216147b7565b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b613b9e614578565b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613b6c3390565b613bf96145e5565b6000838152609e602052604090205473ffffffffffffffffffffffffffffffffffffffff858116911614613c89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f5742423a20556e617574686f72697a65642e000000000000000000000000000060448201526064016108c8565b8181604051613c99929190615403565b604080519182900382206000868152609f602052919091209091613cbd91906155c8565b604051809103902014613d51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f5742423a2043617264206e6f74207374616b656420696e20676976656e20626160448201527f74746c650000000000000000000000000000000000000000000000000000000060648201526084016108c8565b73ffffffffffffffffffffffffffffffffffffffff84166000908152609d6020526040902060a25460ff1615613ea95760a0546000858152600283016020526040902054613d9f9190615300565b42118015613e4357506099546040517f47ff16ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906347ff16ac90613e0090869086906004016156a5565b602060405180830381865afa158015613e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e4191906150f4565b155b613ea9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5742423a20636f6f6c646f776e206e6f74206f7665720000000000000000000060448201526064016108c8565b60008481526001820160205260408082205490519091908390613ecf9087908790615403565b908152604051908190036020018120546098547f70a0823100000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8a811660048501529193506000929116906370a0823190602401602060405180830381865afa158015613f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f759190615413565b9050613f81828261079f565b613fe7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5742423a20496e73756666696369656e7420746f6b656e2062616c616e63650060448201526064016108c8565b6000846000018787604051613ffd929190615403565b90815260405190819003602001902061401760018561542c565b81548110614027576140276151a2565b90600052602060002001549050846000018787604051614048929190615403565b9081526020016040518091039020805480614065576140656156c1565b600190038181906000526020600020016000905590556000856000018888604051614091929190615403565b90815260405190819003602001902054111561410c5787811461410c57808560000188886040516140c3929190615403565b908152602001604051809103902085815481106140e2576140e26151a2565b60009182526020808320909101929092558281526001870190915260408082208690558982528120555b6000888152600286016020526040808220919091555185906141319089908990615403565b908152604051908190036020019020546000036142dd57609c80546000919061415c9060019061542c565b8154811061416c5761416c6151a2565b600091825260209091200154609c5473ffffffffffffffffffffffffffffffffffffffff909116915015614272576000805b609c54811015614213578b73ffffffffffffffffffffffffffffffffffffffff16609c82815481106141d2576141d26151a2565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff160361420157809150614213565b8061420b816151d1565b91505061419e565b5081609c8281548110614228576142286151a2565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b609c805480614283576142836156c1565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055505b6000888152609e6020908152604080832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055609f909152812061432491614823565b8873ffffffffffffffffffffffffffffffffffffffff167fcdc644f7a40cb5d51e46e25428f724a3e15ae38f01d0e83c3c863f51719004db89898960405161436e939291906156f0565b60405180910390a25050505050612bce6001606555565b73ffffffffffffffffffffffffffffffffffffffff83166000908152609d602052604080822090516143ba9085908590615403565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561440c57602002820191906000526020600020905b8154815260200190600101908083116143f8575b50508351939450600092508391505067ffffffffffffffff81111561443357614433614983565b60405190808252806020026020018201604052801561445c578160200160208202803683370190505b509050600082116144c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5742423a204e465473206172656e2774207374616b656400000000000000000060448201526064016108c8565b60005b8281101561451b576144ea878583815181106122fa576122fa6151a2565b60018282815181106144fe576144fe6151a2565b602090810291909101015280614513816151d1565b9150506144cc565b506097546040517f2eb2c2d600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632eb2c2d6906123979030908a9088908790600401615209565b60335460ff16156116da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016108c8565b600260655403614651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108c8565b6002606555565b6001606555565b600054610100900460ff166146f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108c8565b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b600054610100900460ff16614658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108c8565b60335460ff166116da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108c8565b50805461482f90615291565b6000825580601f1061483f575050565b601f01602090049060005260206000209081019061485d9190614860565b50565b5b808211156148755760008155600101614861565b5090565b60006020828403121561488b57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610aa457600080fd5b600080604083850312156148ce57600080fd5b50508035926020909101359150565b73ffffffffffffffffffffffffffffffffffffffff8116811461485d57600080fd5b60006020828403121561491157600080fd5b8135610aa4816148dd565b60006020828403121561492e57600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561496557815187529582019590820190600101614949565b509495945050505050565b602081526000610aa46020830184614935565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156149f9576149f9614983565b604052919050565b600067ffffffffffffffff821115614a1b57614a1b614983565b5060051b60200190565b600082601f830112614a3657600080fd5b81356020614a4b614a4683614a01565b6149b2565b82815260059290921b84018101918181019086841115614a6a57600080fd5b8286015b84811015614a855780358352918301918301614a6e565b509695505050505050565b600067ffffffffffffffff821115614aaa57614aaa614983565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f830112614ae757600080fd5b8135614af5614a4682614a90565b818152846020838601011115614b0a57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215614b3a57600080fd5b823567ffffffffffffffff80821115614b5257600080fd5b614b5e86838701614a25565b93506020850135915080821115614b7457600080fd5b50614b8185828601614ad6565b9150509250929050565b60005b83811015614ba6578181015183820152602001614b8e565b50506000910152565b60008151808452614bc7816020860160208601614b8b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610aa46020830184614baf565b60008083601f840112614c1e57600080fd5b50813567ffffffffffffffff811115614c3657600080fd5b602083019150836020828501011115614c4e57600080fd5b9250929050565b60008060008060608587031215614c6b57600080fd5b8435614c76816148dd565b9350602085013567ffffffffffffffff80821115614c9357600080fd5b614c9f88838901614a25565b94506040870135915080821115614cb557600080fd5b50614cc287828801614c0c565b95989497509550505050565b600080600080600060a08688031215614ce657600080fd5b8535614cf1816148dd565b94506020860135614d01816148dd565b9350604086013592506060860135614d18816148dd565b91506080860135614d28816148dd565b809150509295509295909350565b60008060408385031215614d4957600080fd5b8235614d54816148dd565b946020939093013593505050565b600080600060608486031215614d7757600080fd5b83359250602084013567ffffffffffffffff811115614d9557600080fd5b614da186828701614ad6565b9250506040840135614db2816148dd565b809150509250925092565b600080600060408486031215614dd257600080fd5b83359250602084013567ffffffffffffffff811115614df057600080fd5b614dfc86828701614c0c565b9497909650939450505050565b600080600060408486031215614e1e57600080fd5b833567ffffffffffffffff80821115614e3657600080fd5b614e4287838801614a25565b94506020860135915080821115614e5857600080fd5b50614dfc86828701614c0c565b600080600080600060a08688031215614e7d57600080fd5b8535614e88816148dd565b94506020860135614e98816148dd565b9350604086013567ffffffffffffffff80821115614eb557600080fd5b614ec189838a01614a25565b94506060880135915080821115614ed757600080fd5b614ee389838a01614a25565b93506080880135915080821115614ef957600080fd5b50614f0688828901614ad6565b9150509295509295909350565b600080600060408486031215614f2857600080fd5b833567ffffffffffffffff811115614f3f57600080fd5b614f4b86828701614c0c565b9094509250506020840135614db2816148dd565b600080600060408486031215614f7457600080fd5b8335614f7f816148dd565b9250602084013567ffffffffffffffff811115614df057600080fd5b60008060208385031215614fae57600080fd5b823567ffffffffffffffff811115614fc557600080fd5b614fd185828601614c0c565b90969095509350505050565b60008060408385031215614ff057600080fd5b82359150602083013567ffffffffffffffff81111561500e57600080fd5b614b8185828601614ad6565b801515811461485d57600080fd5b60006020828403121561503a57600080fd5b8135610aa48161501a565b600080600080600060a0868803121561505d57600080fd5b8535615068816148dd565b94506020860135615078816148dd565b93506040860135925060608601359150608086013567ffffffffffffffff8111156150a257600080fd5b614f0688828901614ad6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082028115828204841417610799576107996150ae565b60006020828403121561510657600080fd5b8151610aa48161501a565b6000602080838503121561512457600080fd5b825167ffffffffffffffff81111561513b57600080fd5b8301601f8101851361514c57600080fd5b805161515a614a4682614a01565b81815260059190911b8201830190838101908783111561517957600080fd5b928401925b828410156151975783518252928401929084019061517e565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203615202576152026150ae565b5060010190565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525060a0604083015261524260a0830185614935565b82810360608401526152548185614935565b8381036080850152600281527f30780000000000000000000000000000000000000000000000000000000000006020820152905060408101615197565b600181811c908216806152a557607f821691505b6020821081036152de577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600082516152f6818460208701614b8b565b9190910192915050565b80820180821115610799576107996150ae565b60006020828403121561532557600080fd5b815167ffffffffffffffff81111561533c57600080fd5b8201601f8101841361534d57600080fd5b805161535b614a4682614a90565b81815285602083850101111561537057600080fd5b615381826020830160208601614b8b565b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525083604083015282606083015260a060808301526153f960a08301600281527f3078000000000000000000000000000000000000000000000000000000000000602082015260400190565b9695505050505050565b8183823760009101908152919050565b60006020828403121561542557600080fd5b5051919050565b81810381811115610799576107996150ae565b601f82111561383857600081815260208120601f850160051c810160208610156154665750805b601f850160051c820191505b818110156115b857828155600101615472565b815167ffffffffffffffff81111561549f5761549f614983565b6154b3816154ad8454615291565b8461543f565b602080601f83116001811461550657600084156154d05750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556115b8565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561555357888601518255948401946001909101908401615534565b508582101561558f57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b8381526060602082015260006155b86060830185614baf565b9050826040830152949350505050565b60008083546155d681615291565b600182811680156155ee576001811461562157615650565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0084168752821515830287019450615650565b8760005260208060002060005b858110156156475781548a82015290840190820161562e565b50505082870194505b50929695505050505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b6020815260006156b960208301848661565c565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b83815260406020820152600061538160408301848661565c56fea2646970667358221220117bca4a1838234979b52da237d85d36fb4d84afb1a68ae5eee009b60dba04c064736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102d35760003560e01c80639168ae7211610186578063bc197c81116100e3578063d2bd85d611610097578063e7e4e1f711610071578063e7e4e1f7146106a8578063ee20aed0146106bb578063f23a6e61146106ce57600080fd5b8063d2bd85d614610679578063d7c15bf61461068c578063dee2d74c1461069557600080fd5b8063c7c8afbc116100c8578063c7c8afbc1461064a578063ca4c20d01461065d578063d0a068ff1461066657600080fd5b8063bc197c81146105ce578063c46d0c931461063757600080fd5b80639e8ccaf11161013a578063a90d86671161011f578063a90d866714610595578063ab5dc685146105a8578063b345b8c0146105bb57600080fd5b80639e8ccaf11461056c578063a8bc29a61461058c57600080fd5b806395fbf3a91161016b57806395fbf3a9146105315780639b6c2682146105395780639d76ea581461054c57600080fd5b80639168ae7214610501578063951a56831461052457600080fd5b806333e1a22311610234578063736f616b116101e8578063751408c5116101cd578063751408c5146104d357806379e5e03b146104e65780638456cb59146104f957600080fd5b8063736f616b146104a0578063748365ef146104b357600080fd5b80635acf099c116102195780635acf099c1461043b5780635c975abb146104825780636f74ecbf1461048d57600080fd5b806333e1a223146104205780633f4ba83a1461043357600080fd5b80631caaa4871161028b5780632ac34bc1116102705780632ac34bc1146103da5780632e4723fd146103ed5780632fc5dcea1461040d57600080fd5b80631caaa4871461038457806328fb7745146103ba57600080fd5b806304646a49116102bc57806304646a4914610313578063144fa6d71461032a5780631b48ba071461033f57600080fd5b806301ffc9a7146102d85780630421af7814610300575b600080fd5b6102eb6102e6366004614879565b610706565b60405190151581526020015b60405180910390f35b6102eb61030e3660046148bb565b61079f565b61031c60a05481565b6040519081526020016102f7565b61033d6103383660046148ff565b6107cd565b005b60995461035f9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102f7565b61035f61039236600461491c565b609e6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6103cd6103c83660046148ff565b6109e9565b6040516102f79190614970565b61033d6103e8366004614b27565b610aab565b6104006103fb36600461491c565b610f7d565b6040516102f79190614bf9565b61033d61041b366004614c55565b611017565b61033d61042e366004614cce565b61139c565b61033d6115c0565b61031c610449366004614d36565b73ffffffffffffffffffffffffffffffffffffffff919091166000908152609d6020908152604080832093835260029093019052205490565b60335460ff166102eb565b61033d61049b36600461491c565b6116dc565b61031c6104ae36600461491c565b61183a565b609a5461035f9073ffffffffffffffffffffffffffffffffffffffff1681565b61035f6104e136600461491c565b61199b565b6102eb6104f4366004614d62565b6119d2565b61033d611a32565b61031c61050f3660046148ff565b609d6020526000908152604090206003015481565b60a2546102eb9060ff1681565b610400611b4c565b61033d61054736600461491c565b611c07565b60985461035f9073ffffffffffffffffffffffffffffffffffffffff1681565b60975461035f9073ffffffffffffffffffffffffffffffffffffffff1681565b61031c609b5481565b61033d6105a3366004614dbd565b611d63565b61033d6105b6366004614e09565b61202d565b61033d6105c93660046148ff565b6123d1565b6106066105dc366004614e65565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016102f7565b61033d6106453660046148ff565b6125e8565b6102eb610658366004614f13565b6127ff565b61031c60a35481565b61033d610674366004614f5f565b612851565b61033d610687366004614f9b565b612bd4565b61031c60a15481565b6103cd6106a3366004614f5f565b612e40565b61033d6106b6366004614fdd565b612eda565b61033d6106c9366004615028565b6132ee565b6106066106dc366004615045565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000148061079957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60008060a354846107b091906150dd565b6107c290670de0b6b3a76400006150dd565b909210159392505050565b600033609a546040517f5026c82600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152929350911690635026c82690602401602060405180830381865afa158015610842573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086691906150f4565b6108d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821661094e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5742423a20496e76616c696420746f6b656e206164647265737300000000000060448201526064016108c8565b60985460405173ffffffffffffffffffffffffffffffffffffffff83811682528481169216907f674d28769cbbfd17daf174e00c6a31cb6d8a30ac58fd38b1098bb2267a888d049060200160405180910390a350609880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6097546040517f178b6de600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015260609260009291169063178b6de690602401600060405180830381865afa158015610a5e573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610aa49190810190615111565b9392505050565b6099546040517fb778e183000000000000000000000000000000000000000000000000000000008152829173ffffffffffffffffffffffffffffffffffffffff169063b778e18390610b01908490600401614bf9565b602060405180830381865afa158015610b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4291906150f4565b610ba8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5742423a206e6f7420737461727465640000000000000000000000000000000060448201526064016108c8565b6099546040517f47ff16ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906347ff16ac90610bfe908490600401614bf9565b602060405180830381865afa158015610c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3f91906150f4565b15610ca6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20626174746c6520656e64656400000000000000000000000000000060448201526064016108c8565b6099546040517f5d49778900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690635d49778990610cfc908490600401614bf9565b602060405180830381865afa158015610d19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3d91906150f4565b610dc9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5742423a20626174746c65206e6f742063726561746564206f7220616374697660448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016108c8565b82513390610dd89084836119d2565b610e3e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5742423a204d617820746f6b656e73207374616b65642e00000000000000000060448201526064016108c8565b6000845167ffffffffffffffff811115610e5a57610e5a614983565b604051908082528060200260200182016040528015610e83578160200160208202803683370190505b50905060005b8551811015610ee757610eb683878381518110610ea857610ea86151a2565b60200260200101518761346b565b6001828281518110610eca57610eca6151a2565b602090810291909101015280610edf816151d1565b915050610e89565b506097546040517f2eb2c2d600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632eb2c2d690610f4490859030908a908790600401615209565b600060405180830381600087803b158015610f5e57600080fd5b505af1158015610f72573d6000803e3d6000fd5b505050505050505050565b609f6020526000908152604090208054610f9690615291565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc290615291565b801561100f5780601f10610fe45761010080835404028352916020019161100f565b820191906000526020600020905b815481529060010190602001808311610ff257829003601f168201915b505050505081565b81818080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506099546040517f5d49778900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169250635d49778991506110a3908490600401614bf9565b602060405180830381865afa1580156110c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e491906150f4565b611170576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5742423a20626174746c65206e6f742063726561746564206f7220616374697660448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016108c8565b60a25460ff16611277576099546040517f47ff16ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906347ff16ac906111d0908490600401614bf9565b602060405180830381865afa1580156111ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121191906150f4565b611277576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5742423a20426174746c65206e6f7420656e6465642e0000000000000000000060448201526064016108c8565b609a5473ffffffffffffffffffffffffffffffffffffffff16635026c826336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa1580156112ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132391906150f4565b611389576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064016108c8565b6113958585858561383d565b5050505050565b600054610100900460ff16158080156113bc5750600054600160ff909116105b806113d65750303b1580156113d6575060005460ff166001145b611462576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016108c8565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156114c057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6097805473ffffffffffffffffffffffffffffffffffffffff8089167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556098805488841690831617905560a186905560998054868416908316179055609a80549285169290911691909117905542609b55606460a355611545613944565b61154d6139db565b611555613a7a565b80156115b857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b609a5473ffffffffffffffffffffffffffffffffffffffff16635026c826336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa158015611648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166c91906150f4565b6116d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064016108c8565b6116da613b19565b565b600033609a546040517f5026c82600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152929350911690635026c82690602401602060405180830381865afa158015611751573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177591906150f4565b6117db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064016108c8565b60a3546040805173ffffffffffffffffffffffffffffffffffffffff841681526020810185905280820192909252517f7231189f16a6d29158a7ee4029be9651e8cd39d0b9ad99455708b992423ad6c29181900360600190a15060a355565b60008033609a546040517f5026c82600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152929350911690635026c82690602401602060405180830381865afa1580156118b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d491906150f4565b61193a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064016108c8565b60a054604080519182526020820185905273ffffffffffffffffffffffffffffffffffffffff831682820152517f413a859b874b81545b2b22a26facd81777b79bce9f7631657c033f4d4a5d1cbb9181900360600190a1505060a081905590565b609c81815481106119ab57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60a15473ffffffffffffffffffffffffffffffffffffffff82166000908152609d60205260408082209051919291869190611a0e9087906152e4565b90815260405190819003602001902054611a289190615300565b1115949350505050565b609a5473ffffffffffffffffffffffffffffffffffffffff16635026c826336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa158015611aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ade91906150f4565b611b44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064016108c8565b6116da613b96565b609954604080517fbf81ee6d000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163bf81ee6d9160048083019260009291908290030181865afa158015611bbc573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611c029190810190615313565b905090565b600033609a546040517f5026c82600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152929350911690635026c82690602401602060405180830381865afa158015611c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca091906150f4565b611d06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064016108c8565b60a154604080519182526020820184905273ffffffffffffffffffffffffffffffffffffffff831682820152517f13a511f20997079f309d264161b7628709fc727ea5bcd135d26d44d20a7133929181900360600190a15060a155565b81818080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506099546040517f5d49778900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169250635d4977899150611def908490600401614bf9565b602060405180830381865afa158015611e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3091906150f4565b611ebc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5742423a20626174746c65206e6f742063726561746564206f7220616374697660448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016108c8565b60a25460ff16611fc3576099546040517f47ff16ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906347ff16ac90611f1c908490600401614bf9565b602060405180830381865afa158015611f39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5d91906150f4565b611fc3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5742423a20426174746c65206e6f7420656e6465642e0000000000000000000060448201526064016108c8565b33611fd081868686613bf1565b6097546040517ff242432a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063f242432a90610f4490309085908a9060019060040161538a565b81818080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506099546040517f5d49778900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169250635d49778991506120b9908490600401614bf9565b602060405180830381865afa1580156120d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fa91906150f4565b612186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5742423a20626174746c65206e6f742063726561746564206f7220616374697660448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016108c8565b60a25460ff1661228d576099546040517f47ff16ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906347ff16ac906121e6908490600401614bf9565b602060405180830381865afa158015612203573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222791906150f4565b61228d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5742423a20426174746c65206e6f7420656e6465642e0000000000000000000060448201526064016108c8565b8351339060009067ffffffffffffffff8111156122ac576122ac614983565b6040519080825280602002602001820160405280156122d5578160200160208202803683370190505b50905060005b865181101561233a57612309838883815181106122fa576122fa6151a2565b60200260200101518888613bf1565b600182828151811061231d5761231d6151a2565b602090810291909101015280612332816151d1565b9150506122db565b506097546040517f2eb2c2d600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632eb2c2d69061239790309086908b908790600401615209565b600060405180830381600087803b1580156123b157600080fd5b505af11580156123c5573d6000803e3d6000fd5b50505050505050505050565b600033609a546040517f5026c82600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152929350911690635026c82690602401602060405180830381865afa158015612446573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246a91906150f4565b6124d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064016108c8565b73ffffffffffffffffffffffffffffffffffffffff821661254d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5742423a20496e76616c6964204e465420636f6e74726163740000000000000060448201526064016108c8565b60975460405173ffffffffffffffffffffffffffffffffffffffff83811682528481169216907fcc84b7dfa78b34bb94bda9e3e859b03781c64e9c8870f014f905deb5917d1e349060200160405180910390a350609780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600033609a546040517f5026c82600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152929350911690635026c82690602401602060405180830381865afa15801561265d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268191906150f4565b6126e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064016108c8565b73ffffffffffffffffffffffffffffffffffffffff8216612764576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5742423a20496e76616c696420416374696f6e7320636f6e747261637400000060448201526064016108c8565b60995460405173ffffffffffffffffffffffffffffffffffffffff83811682528481169216907f34094423c59427e099490ccde795f4a7c4741be966ee850d712bd3777efd51849060200160405180910390a350609980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff81166000908152609d602052604080822090518291906128379087908790615403565b908152604051908190036020019020541190509392505050565b81818080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506099546040517f5d49778900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169250635d49778991506128dd908490600401614bf9565b602060405180830381865afa1580156128fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291e91906150f4565b6129aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5742423a20626174746c65206e6f742063726561746564206f7220616374697660448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016108c8565b60a25460ff16612ab1576099546040517f47ff16ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906347ff16ac90612a0a908490600401614bf9565b602060405180830381865afa158015612a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a4b91906150f4565b612ab1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5742423a20426174746c65206e6f7420656e6465642e0000000000000000000060448201526064016108c8565b609a5473ffffffffffffffffffffffffffffffffffffffff16635026c826336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa158015612b39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5d91906150f4565b612bc3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064016108c8565b612bce848484614385565b50505050565b81818080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506099546040517f5d49778900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169250635d4977899150612c60908490600401614bf9565b602060405180830381865afa158015612c7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca191906150f4565b612d2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5742423a20626174746c65206e6f742063726561746564206f7220616374697660448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016108c8565b60a25460ff16612e34576099546040517f47ff16ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906347ff16ac90612d8d908490600401614bf9565b602060405180830381865afa158015612daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dce91906150f4565b612e34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5742423a20426174746c65206e6f7420656e6465642e0000000000000000000060448201526064016108c8565b33612bce818585614385565b73ffffffffffffffffffffffffffffffffffffffff83166000908152609d602052604090819020905160609190612e7a9085908590615403565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015612ecc57602002820191906000526020600020905b815481526020019060010190808311612eb8575b505050505090509392505050565b6099546040517fb778e183000000000000000000000000000000000000000000000000000000008152829173ffffffffffffffffffffffffffffffffffffffff169063b778e18390612f30908490600401614bf9565b602060405180830381865afa158015612f4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f7191906150f4565b612fd7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5742423a206e6f7420737461727465640000000000000000000000000000000060448201526064016108c8565b6099546040517f47ff16ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906347ff16ac9061302d908490600401614bf9565b602060405180830381865afa15801561304a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306e91906150f4565b156130d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20626174746c6520656e64656400000000000000000000000000000060448201526064016108c8565b6099546040517f5d49778900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690635d4977899061312b908490600401614bf9565b602060405180830381865afa158015613148573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316c91906150f4565b6131f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5742423a20626174746c65206e6f742063726561746564206f7220616374697660448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016108c8565b613204600183336119d2565b61326a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5742423a204d617820746f6b656e73207374616b65642e00000000000000000060448201526064016108c8565b61327533848461346b565b60975473ffffffffffffffffffffffffffffffffffffffff1663f242432a33308660016040518563ffffffff1660e01b81526004016132b7949392919061538a565b600060405180830381600087803b1580156132d157600080fd5b505af11580156132e5573d6000803e3d6000fd5b50505050505050565b600033609a546040517f5026c82600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152929350911690635026c82690602401602060405180830381865afa158015613363573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061338791906150f4565b6133ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5742423a20556e617574686f72697a656400000000000000000000000000000060448201526064016108c8565b60a280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001683151590811790915560405190815273ffffffffffffffffffffffffffffffffffffffff8216907fd923d85360f3f592aa7cf591c0f4e489905836ff02f16d7842b6389fcbbb36609060200160405180910390a25050565b613473614578565b61347b6145e5565b6000828152609e602052604090205473ffffffffffffffffffffffffffffffffffffffff1615613507576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5742423a20546f6b656e20616c7265616479207374616b65640000000000000060448201526064016108c8565b73ffffffffffffffffffffffffffffffffffffffff83166000908152609d60205260408082209051909190829061353f9085906152e4565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561359157602002820191906000526020600020905b81548152602001906001019080831161357d575b505083516098546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c811660048301529697509195600095501692506370a082319150602401602060405180830381865afa15801561360e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136329190615413565b9050613648613642836001615300565b8261079f565b156137f85743600385015560405184906136639087906152e4565b908152604051602091819003820181208054600180820183556000928352939091200188905585906136969088906152e4565b908152604051908190036020019020546136b0919061542c565b6000878152600186016020908152604080832093909355600287018152828220429055609e815282822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8c16179055609f9052206137278682615485565b50816000036137a157609c80546001810182556000919091527faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539c0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff89161790555b8673ffffffffffffffffffffffffffffffffffffffff167fa2a4b640524f5410a2969ac3f90a5c7a3197662d845ba3bdf16fe9010e5aad9a8787426040516137eb9392919061559f565b60405180910390a261382a565b6040517f22bbb43c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050506138386001606555565b505050565b6000835167ffffffffffffffff81111561385957613859614983565b604051908082528060200260200182016040528015613882578160200160208202803683370190505b50905060005b84518110156138e7576138b6868683815181106138a7576138a76151a2565b60200260200101518686613bf1565b60018282815181106138ca576138ca6151a2565b6020908102919091010152806138df816151d1565b915050613888565b506097546040517f2eb2c2d600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632eb2c2d690610f44903090899089908790600401615209565b600054610100900460ff166116da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108c8565b600054610100900460ff16613a72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108c8565b6116da61465f565b600054610100900460ff16613b11576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108c8565b6116da614720565b613b216147b7565b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b613b9e614578565b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613b6c3390565b613bf96145e5565b6000838152609e602052604090205473ffffffffffffffffffffffffffffffffffffffff858116911614613c89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f5742423a20556e617574686f72697a65642e000000000000000000000000000060448201526064016108c8565b8181604051613c99929190615403565b604080519182900382206000868152609f602052919091209091613cbd91906155c8565b604051809103902014613d51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f5742423a2043617264206e6f74207374616b656420696e20676976656e20626160448201527f74746c650000000000000000000000000000000000000000000000000000000060648201526084016108c8565b73ffffffffffffffffffffffffffffffffffffffff84166000908152609d6020526040902060a25460ff1615613ea95760a0546000858152600283016020526040902054613d9f9190615300565b42118015613e4357506099546040517f47ff16ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906347ff16ac90613e0090869086906004016156a5565b602060405180830381865afa158015613e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e4191906150f4565b155b613ea9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5742423a20636f6f6c646f776e206e6f74206f7665720000000000000000000060448201526064016108c8565b60008481526001820160205260408082205490519091908390613ecf9087908790615403565b908152604051908190036020018120546098547f70a0823100000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8a811660048501529193506000929116906370a0823190602401602060405180830381865afa158015613f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f759190615413565b9050613f81828261079f565b613fe7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5742423a20496e73756666696369656e7420746f6b656e2062616c616e63650060448201526064016108c8565b6000846000018787604051613ffd929190615403565b90815260405190819003602001902061401760018561542c565b81548110614027576140276151a2565b90600052602060002001549050846000018787604051614048929190615403565b9081526020016040518091039020805480614065576140656156c1565b600190038181906000526020600020016000905590556000856000018888604051614091929190615403565b90815260405190819003602001902054111561410c5787811461410c57808560000188886040516140c3929190615403565b908152602001604051809103902085815481106140e2576140e26151a2565b60009182526020808320909101929092558281526001870190915260408082208690558982528120555b6000888152600286016020526040808220919091555185906141319089908990615403565b908152604051908190036020019020546000036142dd57609c80546000919061415c9060019061542c565b8154811061416c5761416c6151a2565b600091825260209091200154609c5473ffffffffffffffffffffffffffffffffffffffff909116915015614272576000805b609c54811015614213578b73ffffffffffffffffffffffffffffffffffffffff16609c82815481106141d2576141d26151a2565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff160361420157809150614213565b8061420b816151d1565b91505061419e565b5081609c8281548110614228576142286151a2565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b609c805480614283576142836156c1565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055505b6000888152609e6020908152604080832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055609f909152812061432491614823565b8873ffffffffffffffffffffffffffffffffffffffff167fcdc644f7a40cb5d51e46e25428f724a3e15ae38f01d0e83c3c863f51719004db89898960405161436e939291906156f0565b60405180910390a25050505050612bce6001606555565b73ffffffffffffffffffffffffffffffffffffffff83166000908152609d602052604080822090516143ba9085908590615403565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561440c57602002820191906000526020600020905b8154815260200190600101908083116143f8575b50508351939450600092508391505067ffffffffffffffff81111561443357614433614983565b60405190808252806020026020018201604052801561445c578160200160208202803683370190505b509050600082116144c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5742423a204e465473206172656e2774207374616b656400000000000000000060448201526064016108c8565b60005b8281101561451b576144ea878583815181106122fa576122fa6151a2565b60018282815181106144fe576144fe6151a2565b602090810291909101015280614513816151d1565b9150506144cc565b506097546040517f2eb2c2d600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632eb2c2d6906123979030908a9088908790600401615209565b60335460ff16156116da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016108c8565b600260655403614651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108c8565b6002606555565b6001606555565b600054610100900460ff166146f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108c8565b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b600054610100900460ff16614658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108c8565b60335460ff166116da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108c8565b50805461482f90615291565b6000825580601f1061483f575050565b601f01602090049060005260206000209081019061485d9190614860565b50565b5b808211156148755760008155600101614861565b5090565b60006020828403121561488b57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610aa457600080fd5b600080604083850312156148ce57600080fd5b50508035926020909101359150565b73ffffffffffffffffffffffffffffffffffffffff8116811461485d57600080fd5b60006020828403121561491157600080fd5b8135610aa4816148dd565b60006020828403121561492e57600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561496557815187529582019590820190600101614949565b509495945050505050565b602081526000610aa46020830184614935565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156149f9576149f9614983565b604052919050565b600067ffffffffffffffff821115614a1b57614a1b614983565b5060051b60200190565b600082601f830112614a3657600080fd5b81356020614a4b614a4683614a01565b6149b2565b82815260059290921b84018101918181019086841115614a6a57600080fd5b8286015b84811015614a855780358352918301918301614a6e565b509695505050505050565b600067ffffffffffffffff821115614aaa57614aaa614983565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f830112614ae757600080fd5b8135614af5614a4682614a90565b818152846020838601011115614b0a57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215614b3a57600080fd5b823567ffffffffffffffff80821115614b5257600080fd5b614b5e86838701614a25565b93506020850135915080821115614b7457600080fd5b50614b8185828601614ad6565b9150509250929050565b60005b83811015614ba6578181015183820152602001614b8e565b50506000910152565b60008151808452614bc7816020860160208601614b8b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610aa46020830184614baf565b60008083601f840112614c1e57600080fd5b50813567ffffffffffffffff811115614c3657600080fd5b602083019150836020828501011115614c4e57600080fd5b9250929050565b60008060008060608587031215614c6b57600080fd5b8435614c76816148dd565b9350602085013567ffffffffffffffff80821115614c9357600080fd5b614c9f88838901614a25565b94506040870135915080821115614cb557600080fd5b50614cc287828801614c0c565b95989497509550505050565b600080600080600060a08688031215614ce657600080fd5b8535614cf1816148dd565b94506020860135614d01816148dd565b9350604086013592506060860135614d18816148dd565b91506080860135614d28816148dd565b809150509295509295909350565b60008060408385031215614d4957600080fd5b8235614d54816148dd565b946020939093013593505050565b600080600060608486031215614d7757600080fd5b83359250602084013567ffffffffffffffff811115614d9557600080fd5b614da186828701614ad6565b9250506040840135614db2816148dd565b809150509250925092565b600080600060408486031215614dd257600080fd5b83359250602084013567ffffffffffffffff811115614df057600080fd5b614dfc86828701614c0c565b9497909650939450505050565b600080600060408486031215614e1e57600080fd5b833567ffffffffffffffff80821115614e3657600080fd5b614e4287838801614a25565b94506020860135915080821115614e5857600080fd5b50614dfc86828701614c0c565b600080600080600060a08688031215614e7d57600080fd5b8535614e88816148dd565b94506020860135614e98816148dd565b9350604086013567ffffffffffffffff80821115614eb557600080fd5b614ec189838a01614a25565b94506060880135915080821115614ed757600080fd5b614ee389838a01614a25565b93506080880135915080821115614ef957600080fd5b50614f0688828901614ad6565b9150509295509295909350565b600080600060408486031215614f2857600080fd5b833567ffffffffffffffff811115614f3f57600080fd5b614f4b86828701614c0c565b9094509250506020840135614db2816148dd565b600080600060408486031215614f7457600080fd5b8335614f7f816148dd565b9250602084013567ffffffffffffffff811115614df057600080fd5b60008060208385031215614fae57600080fd5b823567ffffffffffffffff811115614fc557600080fd5b614fd185828601614c0c565b90969095509350505050565b60008060408385031215614ff057600080fd5b82359150602083013567ffffffffffffffff81111561500e57600080fd5b614b8185828601614ad6565b801515811461485d57600080fd5b60006020828403121561503a57600080fd5b8135610aa48161501a565b600080600080600060a0868803121561505d57600080fd5b8535615068816148dd565b94506020860135615078816148dd565b93506040860135925060608601359150608086013567ffffffffffffffff8111156150a257600080fd5b614f0688828901614ad6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082028115828204841417610799576107996150ae565b60006020828403121561510657600080fd5b8151610aa48161501a565b6000602080838503121561512457600080fd5b825167ffffffffffffffff81111561513b57600080fd5b8301601f8101851361514c57600080fd5b805161515a614a4682614a01565b81815260059190911b8201830190838101908783111561517957600080fd5b928401925b828410156151975783518252928401929084019061517e565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203615202576152026150ae565b5060010190565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525060a0604083015261524260a0830185614935565b82810360608401526152548185614935565b8381036080850152600281527f30780000000000000000000000000000000000000000000000000000000000006020820152905060408101615197565b600181811c908216806152a557607f821691505b6020821081036152de577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600082516152f6818460208701614b8b565b9190910192915050565b80820180821115610799576107996150ae565b60006020828403121561532557600080fd5b815167ffffffffffffffff81111561533c57600080fd5b8201601f8101841361534d57600080fd5b805161535b614a4682614a90565b81815285602083850101111561537057600080fd5b615381826020830160208601614b8b565b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525083604083015282606083015260a060808301526153f960a08301600281527f3078000000000000000000000000000000000000000000000000000000000000602082015260400190565b9695505050505050565b8183823760009101908152919050565b60006020828403121561542557600080fd5b5051919050565b81810381811115610799576107996150ae565b601f82111561383857600081815260208120601f850160051c810160208610156154665750805b601f850160051c820191505b818110156115b857828155600101615472565b815167ffffffffffffffff81111561549f5761549f614983565b6154b3816154ad8454615291565b8461543f565b602080601f83116001811461550657600084156154d05750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556115b8565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561555357888601518255948401946001909101908401615534565b508582101561558f57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b8381526060602082015260006155b86060830185614baf565b9050826040830152949350505050565b60008083546155d681615291565b600182811680156155ee576001811461562157615650565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0084168752821515830287019450615650565b8760005260208060002060005b858110156156475781548a82015290840190820161562e565b50505082870194505b50929695505050505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b6020815260006156b960208301848661565c565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b83815260406020820152600061538160408301848661565c56fea2646970667358221220117bca4a1838234979b52da237d85d36fb4d84afb1a68ae5eee009b60dba04c064736f6c63430008110033",
  "devdoc": {
    "details": "BattleOps are being inherited in this contract",
    "kind": "dev",
    "methods": {
      "checkRequiredTokenBalance(uint256,uint256)": {
        "params": {
          "_balance": "user ERC20 token balance",
          "_nftCount": "how many nft user have"
        },
        "returns": {
          "_0": "true if he has higher ERC20 token balance than required"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getAllToken(address)": {
        "params": {
          "_player": "Address of the player to get all tokens"
        }
      },
      "getStakedTokenTime(address,uint256)": {
        "params": {
          "_player": "Address of player getting staked time for token",
          "_tokenId": "Staked TokenID"
        }
      },
      "getStakedTokensForBattle(address,string)": {
        "params": {
          "_player": "is the user address"
        }
      },
      "initialize(address,address,uint256,address,address)": {
        "params": {
          "_accessControls": "Contract address for access controls",
          "_cdhNFTAddress": "Contract address for NFT Inventory,",
          "_maxStakeCount": "Number of tokens",
          "_tokenAddress": "Contract address for ERC20 token",
          "_wbbActionsAddress": "Contract address for WorldBossBattle Actions"
        }
      },
      "isEligibleToStake(string,address)": {
        "params": {
          "_pastBattleId": "Previous battleID",
          "_player": "Address of player checking eligibility of"
        },
        "returns": {
          "_0": "boolean if statement is true"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "setBattlePeriodUnstakeStatus(bool)": {
        "params": {
          "_unstakeStatus": "boolean"
        }
      },
      "setCDHNFTContractAddress(address)": {
        "details": "only authorized addresses could change NFT contract address",
        "params": {
          "_nftContract": "new NFT address"
        }
      },
      "setCoolDownPeriod(uint256)": {
        "params": {
          "_time": "in unix"
        },
        "returns": {
          "_0": "_time"
        }
      },
      "setMinTokensRequired(uint256)": {
        "params": {
          "_value": "a uint value for setting minimum tokens required."
        }
      },
      "setToken(address)": {
        "details": "only authorized addresses could change token contract address",
        "params": {
          "_tokenAddress": "is the new token address"
        }
      },
      "setWBBActionsContract(address)": {
        "details": "only authorized addresses could change WBB Actions contract address",
        "params": {
          "_wbbActionsAddress": "new wbbActionsContract address"
        }
      },
      "stake(uint256,string)": {
        "details": "it calls internalStake function for further processing",
        "params": {
          "_battleId": "is unique battle in which the NFT will be staked",
          "_tokenId": "TokenID of CDH NFT"
        }
      },
      "stakeTokens(uint256[],string)": {
        "details": "it calls internalStake function for further processing",
        "params": {
          "_battleId": "is unique battle in which the NFT will be staked",
          "tokenIds": "is an array of tokenId of CDH NFT"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unstake(uint256,string)": {
        "details": "Calls internalUnStake function for unstaking tokens",
        "params": {
          "_battleId": "is unique battle from which the NFT will be unstaked",
          "_tokenId": "TokenId of CDH NFT"
        }
      },
      "unstakeAll(string)": {
        "details": "it calls internalUnStakeAll function for further processing",
        "params": {
          "_battleId": "is unique battle in which the NFT will be unstaked"
        }
      },
      "unstakeAllInternal(address,string)": {
        "details": "it calls internalUnStakeAll function for further processing",
        "params": {
          "_battleId": "unique battle in which the NFT will be unstaked",
          "_player": "the address of a user which nft will be unstaked"
        }
      },
      "unstakeTokens(uint256[],string)": {
        "details": "it calls internalUnStake function for further processing",
        "params": {
          "_battleId": "is unique battle in which the NFT will be unstaked",
          "tokenIds": "is tokenId of CDHNFT"
        }
      },
      "unstakeTokensInternal(address,uint256[],string)": {
        "details": "it calls internalUnStakeAll function for further processing",
        "params": {
          "_battleId": "unique battle in which the NFT will be unstaked",
          "_player": "the address of a user which nft will be unstaked",
          "_tokenIds": "tokenid that user staked"
        }
      },
      "validStakeCount(uint256,string,address)": {
        "params": {
          "tokenLength": "number of tokenIDs that about to staked"
        }
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
      },
      "enableBattlePeriodUnstake": {
        "details": "true - unstake after cool down period end, false - unstake after battle ends"
      }
    },
    "title": "WorldBossBattle, the game will support NFTs for in-game items and stakes the NFTs to join the P2E event.",
    "version": 1
  },
  "userdoc": {
    "events": {
      "NFTStaked(address,uint256,string,uint256)": {
        "notice": "Event is emitted when NFT is staked with owner address, token id and in which battle the token is staked"
      },
      "NFTUnstaked(address,uint256,string)": {
        "notice": "Event is emitted when NFT is un-staked with owner address, token id and in which battle the token is un-staked"
      },
      "SetBattlePeriodUnstakeStatus(address,bool)": {
        "notice": "Event is emitted when battle period unstake status is set"
      },
      "SetCoolDownPeriod(uint256,uint256,address)": {
        "notice": "Event for setting cooldown period for user to be able to restake / unstake token"
      },
      "SetMaxStakeCount(uint256,uint256,address)": {
        "notice": "Event for when setting maximum number of token a user can stake which emits old count and new count address along with sender address"
      },
      "SetMinTokensRequired(address,uint256,uint256)": {
        "notice": "Event is emitted when minimum tokens required to stake is set"
      },
      "SetNFTContract(address,address,address)": {
        "notice": "Event for when setting NFT contract which emits old NFT address and new NFT address along with sender address"
      },
      "SetTokenContract(address,address,address)": {
        "notice": "Event for when setting ERC20 Token contract which emits old token address and new token address along with sender address"
      },
      "SetWBBActionsAddress(address,address,address)": {
        "notice": "Event for setting WBBActions contract Address which emits old WBBActions address and new WBBActions address along with sender address"
      }
    },
    "kind": "user",
    "methods": {
      "cdhNFT()": {
        "notice": "to store cdhNFT contract address"
      },
      "checkRequiredTokenBalance(uint256,uint256)": {
        "notice": "Internal methods for staking operations"
      },
      "cooldownPeriod()": {
        "notice": "to store the cooldownPeriod"
      },
      "enableBattlePeriodUnstake()": {
        "notice": "Flag to enable or disable the battle unstake period."
      },
      "getAllToken(address)": {
        "notice": "function to get all the token that a address has in the Inventory contract"
      },
      "getStakedTokenTime(address,uint256)": {
        "notice": "function to see user stakedTokenTime for specific tokenId"
      },
      "getStakedTokensForBattle(address,string)": {
        "notice": "Get all the tokens staked by user in the battleId"
      },
      "initialize(address,address,uint256,address,address)": {
        "notice": "Since it is upgradable function it is initialized instead of using constructor"
      },
      "latestBattle()": {
        "notice": "function to get the latest battle that is created"
      },
      "maxStakeCount()": {
        "notice": "to store the value in which a user can stake"
      },
      "minTokensRequired()": {
        "notice": "minimum Tokens for staking"
      },
      "pause()": {
        "notice": "Pause contract so users wont be able to stake new tokens"
      },
      "setBattlePeriodUnstakeStatus(bool)": {
        "notice": "Set the boolean status to enable Battle period stake"
      },
      "setCDHNFTContractAddress(address)": {
        "notice": "function to change the contract address of CDH NFT"
      },
      "setCoolDownPeriod(uint256)": {
        "notice": "to set the cooldown period"
      },
      "setMaxStakeCount(uint256)": {
        "notice": "function to set the limit of token that can be staked"
      },
      "setMinTokensRequired(uint256)": {
        "notice": "Set the minimum number of tokens required for staking nft in WBB"
      },
      "setToken(address)": {
        "notice": "function to change the contract address of ERC20 token"
      },
      "setWBBActionsContract(address)": {
        "notice": "Change the WBBActionsContract address that will set WBBActionsContract"
      },
      "stake(uint256,string)": {
        "notice": "Function to stake a single CDHNFT that sender owns"
      },
      "stakeTokens(uint256[],string)": {
        "notice": "Function to stake a array of CDH NFT that sender owns"
      },
      "stakers(address)": {
        "notice": "Mapping for TokenStakers"
      },
      "stakersAddress(uint256)": {
        "notice": "List of stakers address"
      },
      "tokenAddress()": {
        "notice": "to store ERC20 token contract"
      },
      "tokenOwner(uint256)": {
        "notice": "Mapping of tokenId to owner's address"
      },
      "tokenToBattleId(uint256)": {
        "notice": "maps tokenId to battleId"
      },
      "unpause()": {
        "notice": "UnPause contract so users be able to stake new tokens again"
      },
      "unstake(uint256,string)": {
        "notice": "public function to unstake a single CDHNFT that sender owns"
      },
      "unstakeAll(string)": {
        "notice": "public function to unstake all CDHNFT that sender owns"
      },
      "unstakeAllInternal(address,string)": {
        "notice": "Internal function to unstake all CDHNFT that sender owns"
      },
      "unstakeTokens(uint256[],string)": {
        "notice": "public function to unstake an array of  CDHNFT that sender owns"
      },
      "unstakeTokensInternal(address,uint256[],string)": {
        "notice": "Internal function to unstake tokens CDHNFT that sender owns"
      },
      "validStakeCount(uint256,string,address)": {
        "notice": "Check the limit of token that can be staked"
      }
    },
    "notice": "you can use this contract for only staking, un-staking and re-staking the NFTs",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 547,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 550,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2657,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 730,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 835,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 850,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 908,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10975,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "cdhNFT",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(ICDHNFTInventory)12543"
      },
      {
        "astId": 10979,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IToken)12581"
      },
      {
        "astId": 10982,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "wbbActions",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(IWBBActions)12704"
      },
      {
        "astId": 10985,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "accessControls",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(IGameAccessControls)12561"
      },
      {
        "astId": 10987,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "lastInteractionTime",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 11007,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "stakersAddress",
        "offset": 0,
        "slot": "156",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 11013,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "stakers",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_address,t_struct(TokenStaker)11003_storage)"
      },
      {
        "astId": 11018,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "tokenOwner",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11023,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "tokenToBattleId",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 11026,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "cooldownPeriod",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 11029,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "maxStakeCount",
        "offset": 0,
        "slot": "161",
        "type": "t_uint256"
      },
      {
        "astId": 11032,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "enableBattlePeriodUnstake",
        "offset": 0,
        "slot": "162",
        "type": "t_bool"
      },
      {
        "astId": 11035,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "minTokensRequired",
        "offset": 0,
        "slot": "163",
        "type": "t_uint256"
      },
      {
        "astId": 12456,
        "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
        "label": "__gap",
        "offset": 0,
        "slot": "164",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICDHNFTInventory)12543": {
        "encoding": "inplace",
        "label": "contract ICDHNFTInventory",
        "numberOfBytes": "20"
      },
      "t_contract(IGameAccessControls)12561": {
        "encoding": "inplace",
        "label": "contract IGameAccessControls",
        "numberOfBytes": "20"
      },
      "t_contract(IToken)12581": {
        "encoding": "inplace",
        "label": "contract IToken",
        "numberOfBytes": "20"
      },
      "t_contract(IWBBActions)12704": {
        "encoding": "inplace",
        "label": "contract IWBBActions",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(TokenStaker)11003_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct WorldBossBattle.TokenStaker)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenStaker)11003_storage"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenStaker)11003_storage": {
        "encoding": "inplace",
        "label": "struct WorldBossBattle.TokenStaker",
        "members": [
          {
            "astId": 10992,
            "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
            "label": "battleTokenIds",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)"
          },
          {
            "astId": 10996,
            "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
            "label": "tokenIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 11000,
            "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
            "label": "stakedTokenTime",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 11002,
            "contract": "contracts/game/WorldBossBattle.sol:WorldBossBattle",
            "label": "blockNumber",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}